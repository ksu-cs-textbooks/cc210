




	
	
		

	
	
		

	
	
		

	
	
		

	
	
		
		

	
	
		
		
		

	
	
		
		
		

	
	
		

	
	
		
		
		

	
	
		

	
	
		
		
		

	
	
		

	
	
		
		
		

	
	
		

	
	
		
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		

	
	
		
		
		

	
	
		

	
	
		
		
		

	
	
		

	
	
		
		
		

	
	
		

	
	
		
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		

	
	
		

	
	
		
		
		
		

	
	
		

	
	
		

	
	
		
		
		

	
	
		

	
	
		
		
		

	
	
		

	
	
		
		
		

	
	
		
		
		

	
	
		

	
	
		

	
	
		
		
		

	
	
		

	
	
		
		
		

	
	
		

	
	
		
		
		

	
	
		
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		

	
	
		

	
	
		
		
		
		

	
	
		

	
	
		

	
	
		
		
		
		

	
	
		

	
	
		

	
	
		

	
	
		
		
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		

	
	
		

	
	
		
		
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		

	
	
		

	
	
		
		
		
		

	
	
		

	
	
		

	
	
		
		
		
		

	
	
		

	
	
		

	
	
		
		
		
		

	
	
		

	
	
		

	
	
		
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		

	
	
		

	
	
		
		
		
		

	
	
		

	
	
		

	
	
		

	
	
		
		
		
		

	
	
		

	
	
		

	
	
		
		
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		

	
	
		

	
	
		
		
		
		

	
	
		

	
	
		

	
	
		
		
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		

	
	
		

	
	
		
		
		
		

	
	
		

	
	
		

	
	
		
		
		
		

	
	
		

	
	
		

	
	
		
		
		
		

	
	
		

	
	
		

	
	
		

	
	
		
		
		
		

	
	
		

	
	
		

	
	
		
		
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		

	
	
		

	
	
		
		
		
		

	
	
		

	
	
		

	
	
		
		
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		

	
	
		

	
	
		
		
		
		

	
	
		

	
	
		

	
	
		

	
	
		
		
		
		

	
	
		

	
	
		

	
	
		
		
		
		

	
	
		

	
	
		

	
	
		
		
		
		

	
	
		

	
	
		

	
	
		
		
		
		

	
	
		

	
	
		

	
	
		
		
		
		
		

	
	
		

	
	
		

	
	
		

	
	
		
		
		
		

	
	
		

	
	
		

	
	
		
		
		
		

	
	
		

	
	
		

	
	
		
		
		
		

	
	
		

	
	
		

	
	
		
		
		
		

	
	
		

	
	
		

	
	
		
		
		
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		

	
	
		

	
	
		
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		

	
	
		

	
	
		
		
		
		

	
	
		

	
	
		

	
	
		
		
		
		

	
	
		

	
	
		

	
	
		
		
		
		

	
	
		

	
	
		

	
	
		

	
	
		
		
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		

	
	
		

	
	
		
		
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		

	
	
		

	
	
		
		
		
		

	
	
		

	
	
		

	
	
		

	
	
		
		
		
		

	
	
		

	
	
		

	
	
		
		
		
		

	
	
		

	
	
		

	
	
		
		
		
		

	
	
		

	
	
		

	
	
		
		
		
		

	
	
		
		
		

	
	
		

	
	
		

	
	
		

	
	
		
		
		
		

	
	
		

	
	
		

	
	
		
		
		
		

	
	
		

	
	
		

	
	
		
		
		
		

	
	
		

	
	
		

	
	
		
		
		
		

	
	
		
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		

	
	
		

	
	
		
		
		
		

	
	
		

	
	
		

	
	
		

	
	
		
		
		
		

	
	
		

	
	
		

	
	
		
		
		
		

	
	
		

	
	
		

	
	
		
		
		
		

	
	
		

	
	
		

	
	
		
		
		
		

	
	
		

	
	
		

	
	
		
		
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		

	
	
		

	
	
		
		
		
		

	
	
		

	
	
		

	
	
		
		
		
		

	
	
		

	
	
		

	
	
		
		
		
		

	
	
		

	
	
		

	
	
		
		
		
		

	
	
		

	
	
		

	
	
		
		
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		

	
	
		

	
	
		
		
		
		

	
	
		

	
	
		
		
		

	
	
		

	
	
		

	
	
		

	
	
		
		
		
		

	
	
		

	
	
		

	
	
		
		
		
		

	
	
		

	
	
		

	
	
		
		
		
		

	
	
		

	
	
		

	
	
		
		
		
		
		

	
	
		

	
	
		

	
	
		

	
	
		
		
		
		

	
	
		

	
	
		

	
	
		
		
		
		

	
	
		

	
	
		

	
	
		
		
		
		

	
	
		
		

	
	
		
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		

	
	
		

	
	
		

	
	
		
		
		
		

	
	
		

	
	
		

	
	
		
		
		
		

	
	
		

	
	
		

	
	
		
		
		
		

	
	
		

	
	
		

	
	
		
		
		
		

	
	
		

	
	
		

	
	
		
		
		
		

	
	
		

	
	
		

	
	
		
		
		
		

	
	
		

	
	
		

	
	
		
		
		
		

	
	
		

	
	
		

	
	
		
		
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		

	
	
		

	
	
		
		
		
		

	
	
		

	
	
		

	
	
		
		
		
		

	
	
		

	
	
		

	
	
		
		
		
		

	
	
		

	
	
		

	
	
		
		
		
		

	
	
		

	
	
		

	
	
		
		
		
		

	
	
		

	
	
		

	
	
		
		
		
		

	
	
		

	
	
		

	
	
		
		
		
		

	
	
		

	
	
		

	
	
		
		
		
		

	
	
		
		

	
	
		
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		

	
	
		

	
	
		
		
		
		
		

	
	
		

	
	
		
		
<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Java Arrays on CC 210 Textbook</title>
    <link>https://ksu-cs-textbooks.github.io/cc210/08-aggregate-data/05-java/</link>
    <description>Recent content in Java Arrays on CC 210 Textbook</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="https://ksu-cs-textbooks.github.io/cc210/08-aggregate-data/05-java/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>A Worked Example</title>
      <link>https://ksu-cs-textbooks.github.io/cc210/08-aggregate-data/05-java/09-example/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ksu-cs-textbooks.github.io/cc210/08-aggregate-data/05-java/09-example/</guid>
      <description>Now that we&amp;rsquo;ve learned how to work with loops and arrays, let&amp;rsquo;s see if we can solve a more challenging problem using loops and arrays.
Problem Statement For this example, let&amp;rsquo;s build a program that matches the following problem statement:
Write a program to calculate weighted grades for a student taking a course. The program should begin by accepting the student&amp;rsquo;s name and a single positive integer as input, giving the number of assignments in the course.</description>
    </item>
    <item>
      <title>Array Creation</title>
      <link>https://ksu-cs-textbooks.github.io/cc210/08-aggregate-data/05-java/01-array-creation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ksu-cs-textbooks.github.io/cc210/08-aggregate-data/05-java/01-array-creation/</guid>
      <description>As with any variable in Java, we must declare an array variable before we can use it.
Array Declaration To declare an array, we&amp;rsquo;ll need to provide the type, a variable name, and square brackets [] to denote that this variable is an array.
The preferred way of doing so is: &amp;lt;type&amp;gt;[] &amp;lt;variable_name&amp;gt;; as we can see in these examples:
//integer array int[] a; //boolean array boolean[] b; //double array double[] d; We can create an array of an available type in Java, including all primitive data types and object types.</description>
    </item>
    <item>
      <title>Accessing Array Elements</title>
      <link>https://ksu-cs-textbooks.github.io/cc210/08-aggregate-data/05-java/02-accessing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ksu-cs-textbooks.github.io/cc210/08-aggregate-data/05-java/02-accessing/</guid>
      <description>Once we&amp;rsquo;ve created our array, we can access individual array elements by placing the index of that element inside of the square brackets [] following the variable name.
Array indexes in Java start at 0. So, to access the first element of an array named x, we would use x[0].
Similarly, the last array index is one less than the total size of the array. If the array named x has a size of 5, then the last element would be x[4].</description>
    </item>
    <item>
      <title>Array Length</title>
      <link>https://ksu-cs-textbooks.github.io/cc210/08-aggregate-data/05-java/03-length/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ksu-cs-textbooks.github.io/cc210/08-aggregate-data/05-java/03-length/</guid>
      <description>Arrays in Java have a fixed length, which is set when they are initialized.
To get the length of an existing array, use the built-in length property:
int[] a = new int[5]; boolean[] b = {true, false, true, false}; System.out.println(a.length); // 5 System.out.println(b.length); // 4 While it may seem obvious what the size of each array is in this example, there are many instances where we&amp;rsquo;ll be given an array with unknown size from another piece of code.</description>
    </item>
    <item>
      <title>Multidimensional Arrays</title>
      <link>https://ksu-cs-textbooks.github.io/cc210/08-aggregate-data/05-java/04-multidimensional/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ksu-cs-textbooks.github.io/cc210/08-aggregate-data/05-java/04-multidimensional/</guid>
      <description>To create a multidimensional array in Java, simply provide additional square brackets [] as part of the array declaration. Similarly, when we initialize the array, we&amp;rsquo;ll need to provide a length for each dimension of the array:
//2d integer array int[][] a = new int[5][5]; //3d boolean array boolean[][][] b = new boolean[2][4][8]; //4d double array double[][][][] c = new double[5][4][6][2]; We can also directly initialize the array elements, just as we did before.</description>
    </item>
    <item>
      <title>Array Operations</title>
      <link>https://ksu-cs-textbooks.github.io/cc210/08-aggregate-data/05-java/05-array-operations/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ksu-cs-textbooks.github.io/cc210/08-aggregate-data/05-java/05-array-operations/</guid>
      <description>We&amp;rsquo;ve already covered one of the operations we can perform on an array, length. Let&amp;rsquo;s look at one more.
Copying Arrays Java has a built-in method to copy sequential elements from one array to another:
System.arraycopy(source, sourcePosition, destination, destinationPosition, length) Just like the method we use to print to the terminal, System.out.println, this is just another method that is available in System that we can use in our code.
That method accepts 5 inputs:</description>
    </item>
    <item>
      <title>Array Loops</title>
      <link>https://ksu-cs-textbooks.github.io/cc210/08-aggregate-data/05-java/06-array-loops/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ksu-cs-textbooks.github.io/cc210/08-aggregate-data/05-java/06-array-loops/</guid>
      <description>One of the most powerful ways to use arrays is to combine them with loops. Loops provide an easy way to perform operations on all elements in an array, no matter what the size of the array is.
Let&amp;rsquo;s go back to the flowchart seen earlier in this chapter, and see if we can implement that program in Java.
First, we&amp;rsquo;ll need to start with a program that reads information from the keyboard.</description>
    </item>
    <item>
      <title>Accumulator Pattern</title>
      <link>https://ksu-cs-textbooks.github.io/cc210/08-aggregate-data/05-java/07-accumulator-pattern/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ksu-cs-textbooks.github.io/cc210/08-aggregate-data/05-java/07-accumulator-pattern/</guid>
      <description>YouTube Video
The accumulator pattern and its adaptations are very useful when you want to compile certain information about the elements (values) in an aggregate data collection. The general pattern is
dataSet &amp;lt;- some aggregate data accumulator &amp;lt;- initial value FOR EACH item IN dataSet{ IF (filtering condition){ accumulator &amp;lt;- accumulator + item } } Start with some aggregated data (dataSet) Initialize your accumulator variable BEFORE the loop generally 1, 0, &amp;quot;&amp;quot;, or and empty list/array Loop through every element of the dataSet Optionally filter the elements Update the accumulator for the element AFTER the loop the accumulator variable holds the value(s) you want To add up all the odd elements of an integer array, one might</description>
    </item>
    <item>
      <title>Array Subgoals</title>
      <link>https://ksu-cs-textbooks.github.io/cc210/08-aggregate-data/05-java/08-subgoals/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ksu-cs-textbooks.github.io/cc210/08-aggregate-data/05-java/08-subgoals/</guid>
      <description>Working with arrays in Java can also be quite complex. Thankfully, we can break each step down into subgoals to make it more manageable.
Evaluating Arrays Here are the subgoals we can use to evaluate statements with arrays:
1. Set up Array from 0 to Size - 1 This may be a bit confusing at first, but it will really help us understand arrays. Anytime we are tracing code and see a new array defined, we need to set up an array in our list of variables to store those values.</description>
    </item>
  </channel>
</rss>