




	
	
		

	
	
		

	
	
		

	
	
		

	
	
		
		

	
	
		
		
		

	
	
		
		
		

	
	
		

	
	
		
		
		

	
	
		

	
	
		
		
		

	
	
		

	
	
		
		
		

	
	
		

	
	
		
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		

	
	
		
		
		

	
	
		

	
	
		
		
		

	
	
		

	
	
		
		
		

	
	
		

	
	
		
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		

	
	
		

	
	
		
		
		
		

	
	
		

	
	
		

	
	
		
		
		

	
	
		

	
	
		
		
		

	
	
		

	
	
		
		
		

	
	
		
		
		

	
	
		

	
	
		

	
	
		
		
		

	
	
		

	
	
		
		
		

	
	
		

	
	
		
		
		

	
	
		
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		

	
	
		

	
	
		
		
		
		

	
	
		

	
	
		

	
	
		
		
		
		

	
	
		

	
	
		

	
	
		

	
	
		
		
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		

	
	
		

	
	
		
		
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		

	
	
		

	
	
		
		
		
		

	
	
		

	
	
		

	
	
		
		
		
		

	
	
		

	
	
		

	
	
		
		
		
		

	
	
		

	
	
		

	
	
		
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		

	
	
		

	
	
		
		
		
		

	
	
		

	
	
		

	
	
		

	
	
		
		
		
		

	
	
		

	
	
		

	
	
		
		
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		

	
	
		

	
	
		
		
		
		

	
	
		

	
	
		

	
	
		
		
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		

	
	
		

	
	
		
		
		
		

	
	
		

	
	
		

	
	
		
		
		
		

	
	
		

	
	
		

	
	
		
		
		
		

	
	
		

	
	
		

	
	
		

	
	
		
		
		
		

	
	
		

	
	
		

	
	
		
		
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		

	
	
		

	
	
		
		
		
		

	
	
		

	
	
		

	
	
		
		
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		
<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Java Data Types Tutorial on CC 210 Textbook</title>
    <link>https://ksu-cs-textbooks.github.io/cc210/02-data-types-math/08-java/</link>
    <description>Recent content in Java Data Types Tutorial on CC 210 Textbook</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="https://ksu-cs-textbooks.github.io/cc210/02-data-types-math/08-java/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Operators</title>
      <link>https://ksu-cs-textbooks.github.io/cc210/02-data-types-math/08-java/04-operators/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ksu-cs-textbooks.github.io/cc210/02-data-types-math/08-java/04-operators/</guid>
      <description>Now that we&amp;rsquo;ve learned how to create our own variables, we can use them to perform a wide variety of mathematical operations. For most of these, we&amp;rsquo;ll use the same operator symbols that we&amp;rsquo;ve used before in math, but a few of them are unique to programming languages like Java.
For each of the examples below, we&amp;rsquo;ll assume that we have already created two int variables, x and y, as follows:</description>
    </item>
    <item>
      <title>Types</title>
      <link>https://ksu-cs-textbooks.github.io/cc210/02-data-types-math/08-java/01-java-types/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ksu-cs-textbooks.github.io/cc210/02-data-types-math/08-java/01-java-types/</guid>
      <description>The Java programming language is a explicit statically typed language. This means that each and every variable we use in our programs must be declared with a name and a type before we can use it. The Java compiler can then perform a step known as type checking, which verifies that we are using the proper data types in our program.
The major advantage of this approach is that many errors in our computer programs can be discovered by the compiler, well before we ever try to run the program directly.</description>
    </item>
    <item>
      <title>Numbers</title>
      <link>https://ksu-cs-textbooks.github.io/cc210/02-data-types-math/08-java/02-numbers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ksu-cs-textbooks.github.io/cc210/02-data-types-math/08-java/02-numbers/</guid>
      <description>Most of the computer programs we&amp;rsquo;ll write must deal with numbers in some way. So, it makes perfect sense to start working with the numerical data types, since we&amp;rsquo;ll use them very often. Let&amp;rsquo;s dive in and see how we can use these numerical data types in Java!
Java has built in primitive types for various numeric, text and logic values. A variable in Java can refer to either a primitive type or a full fledged object.</description>
    </item>
    <item>
      <title>Other Types</title>
      <link>https://ksu-cs-textbooks.github.io/cc210/02-data-types-math/08-java/03-other-types/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ksu-cs-textbooks.github.io/cc210/02-data-types-math/08-java/03-other-types/</guid>
      <description>Beyond numbers, there are a few other primitive data types in Java. Let&amp;rsquo;s take a quick look at them and see how they can be used in our programs.
Boolean Java supports a primitive data type named boolean that can only store two values: true and false. As we might expect, we can use these boolean variables to store answers to questions in our program, such as &amp;ldquo;Is x greater than y?</description>
    </item>
    <item>
      <title>Command-Line Arguments</title>
      <link>https://ksu-cs-textbooks.github.io/cc210/02-data-types-math/08-java/05-command-line-arguments/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ksu-cs-textbooks.github.io/cc210/02-data-types-math/08-java/05-command-line-arguments/</guid>
      <description>The Linux command line consists of the command and the arguments.
In our case the command, the word Linux translates into action is &amp;ldquo;java&amp;rdquo;. Everything else is packaged up as string-values and sent to the Java Virtual Machine. The JVM takes the file name, starts the program with that file name, and passes the remaining items (arguments) to the program.
Accessing Command-line Arguments in a Object Oriented Program By OOP convention, the command line arguments are sent to the programs&amp;rsquo;s main method.</description>
    </item>
    <item>
      <title>Subgoals - Evaluating Expressions</title>
      <link>https://ksu-cs-textbooks.github.io/cc210/02-data-types-math/08-java/06-subgoals-evaluating/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ksu-cs-textbooks.github.io/cc210/02-data-types-math/08-java/06-subgoals-evaluating/</guid>
      <description>One of the unique parts of this course will be the inclusion of subgoals to help us better understand what is going on in our code. Subgoals are designed to help us structure our thinking process in a way that matches what an experienced developer might have.
A great example is learning how to read. Fluent readers can read whole words at a time, while processing and retaining information from several sentences at once.</description>
    </item>
    <item>
      <title>Subgoals - Writing Expressions</title>
      <link>https://ksu-cs-textbooks.github.io/cc210/02-data-types-math/08-java/07-subgoals-writing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ksu-cs-textbooks.github.io/cc210/02-data-types-math/08-java/07-subgoals-writing/</guid>
      <description>We can also use subgoals to help us write new expressions in our code. These subgoals help us understand each part of the process of building a new expression, and they also help us avoid many common errors.
Writing Expressions Here are the subgoals for writing a new expression:
1. Find Variable in Problem Statement The first step is to determine which part of the problem statement will be represented by a variable.</description>
    </item>
    <item>
      <title>Printing Text &amp; Numbers</title>
      <link>https://ksu-cs-textbooks.github.io/cc210/02-data-types-math/08-java/08-printing-text-numbers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ksu-cs-textbooks.github.io/cc210/02-data-types-math/08-java/08-printing-text-numbers/</guid>
      <description>Printing Text with Variables Now that we&amp;rsquo;ve learned how to run our program and provide it some input, we must also learn how to provide output that includes our variables as well as text all on the same line. There are a few ways to accomplish this.
First, we can use System.out.print() to print text without a newline character at the end, so that the next output will begin on the same line.</description>
    </item>
  </channel>
</rss>