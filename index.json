




	
	
		

	
	
		

	
	
		

	
	
		

	
	
		
		

	
	
		
		
		

	
	
		
		
		

	
	
		

	
	
		
		
		

	
	
		

	
	
		
		
		

	
	
		

	
	
		
		
		

	
	
		

	
	
		
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		

	
	
		
		
		

	
	
		

	
	
		
		
		

	
	
		

	
	
		
		
		

	
	
		

	
	
		
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		

	
	
		

	
	
		
		
		
		

	
	
		

	
	
		

	
	
		
		
		

	
	
		

	
	
		
		
		

	
	
		

	
	
		
		
		

	
	
		
		
		

	
	
		

	
	
		

	
	
		
		
		

	
	
		

	
	
		
		
		

	
	
		

	
	
		
		
		

	
	
		
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		
[
  {
    "content": "Chapter 0 Introduction Welcome to the Fundamental Computer Programming Concepts course!\n",
    "description": "",
    "tags": null,
    "title": "Introduction",
    "uri": "/00-introduction/"
  },
  {
    "content": "Chapter 0 Codio Introduction A Quick Introduction to Codio\nWeb Only This content is presented in the course directly through Codio. Any references to interactive portions are only relevant for that interface. This content is included here as reference only.\n",
    "description": "",
    "tags": null,
    "title": "Codio Introduction",
    "uri": "/0a-codio-intro/"
  },
  {
    "content": " Edited Transcript Hello, I am Emily Alfs-Votipka. I will be your instructor for this semester for CC 210. Please feel free to call me Emily. If you prefer formality you can call me Mrs. Alfs-Votipka. Either is fine with me.\nIf you have any questions related to course content, please email the CC 210 help email shown here in the syllabus. If you have any non-course related questions for me, you can email me on my personal email. That’s just emilyalfs@ksu.edu. Though for course things it is best to use the CC 210 help.\nOkay, so when you start the course, you’ll see something like this, you’ll see this splash page, obviously, for Python, you’ll see Python here, and there will be a Python graphic, you can also look at the announcements, there is this announcement for the potential to be dropped for non participation. And you can read that in your own time. So what you’ll need to do is make sure that you complete Module Zero to be considered participating in the course.\nSo in the course, we have all of these modules, and again, right now I’m looking at the Java specific, but this is very similar to the Python, you’ll see we have all of these modules. And you can collapse them all if you like. And then just expand the one that you’re working on. Or you can have them all expanded if you want as well.\nWe also have the syllabus that you can go to, this has all of the contact information. I would like to add at this point, um, I will be adding office hours, I am not certain on what times those will be I do teach some in person classes. So I’m going to try and fit those around that schedule. And also, if you are not in Manhattan or not near campus, I will offer some online components for meetings. And that will typically be through my Calendly. If you’re concerned about that, please do feel free to reach out. And we can coordinate something.\nI highly recommend that you read through the syllabus. One key thing is the late work policy is is very important that you don’t get behind. So if you do feel like you’re getting off track, then please feel free to reach out and I’ll help to get you back on to the right track. The policy is that the grade will be reduced by 10% of the total points per day that it’s late. So if it’s due Thursday at midnight, and you turn it in, say Friday afternoon, then you will lose 10% of the points. That’ll be automatically assessed by Canvas. But that penalty won’t show up in codio. So Canvas is the official source for your grades and what will end up being your final grade. So if anything seems off or out of whack in Canvas, please reach out and let me know.\nAt the bottom of this page, we have this Course Summary. So this course summary is handy to kind of get a broad picture of what’s due when. I have all of the due dates currently set up in Canvas. Another way that you can be aware of what’s coming up what you need to do, there is this to do list on the right hand side. And that will tell you similar to that course summary what is due and the precise time that it’s due.\nAnother thing you can do is view the course calendar. And here you can also see everything that will be due for a particular day. Again, I have all of the due dates mapped out and such. So your calendar should stay relatively the same as what you see here. That’s all for this first announcements video.\nSo go ahead and get started on the course content. And please let me know if you have any questions or concerns. I’m happy to help and student success is important to me. So if there’s anything that you see that you feel like could be done better or differently, please let me know please reach out. I’m happy to help and to integrate new tools or techniques into the course to help make it a better course overall\n",
    "description": "",
    "tags": null,
    "title": "Fall '22 Week 1",
    "uri": "/y-weekly-updates/01_week/"
  },
  {
    "content": " Edited Transcript Will be updated shortly!\nKey Points:\nMy office hours are Monday and Friday 10-12 CC Help Sessions Wednesday 3:30-4:45 in Calvin 306 Use the CC210 help email for course help Use the course calendar to stay up to date on due dates I hope to have short intro’s graded shortly! I sincerely want to read these. ",
    "description": "",
    "tags": null,
    "title": "Fall '22 Week 3",
    "uri": "/y-weekly-updates/03_week/"
  },
  {
    "content": " General Notes Key Points:\nThe Check-It buttons do not test full code coverage They will tell you if something is wrong, but not what is wrong Take the time to decompose the project description Create an outline that makes sense to you Ask questions! You can ask for personal feedback on your code My office hours are Monday 10-12 and Friday 11-1 Use my Calendly to schedule a virtual meeting CC Help Sessions Wednesday 3:30-4:45 in Calvin 306 Use the CC210 help email for course help The last day to drop is Friday October 28th ",
    "description": "",
    "tags": null,
    "title": "Fall '22 Week 9",
    "uri": "/y-weekly-updates/09_week/"
  },
  {
    "content": " Resources Slides Previous Versions Video Script [Slide 1]\nHello and welcome to the Computational Core program!\nMy name is Emily Alfs-Votipka, and I’ll be one of the instructors for this program. My contact information is shown here, and is also listed on the syllabus.\n[Slide 2]\nThere are many other instructors and TAs for this program that you may interact with or see in the tutorial videos. They all have been instrumental in the development of this program.\n[Slide 3]\nIn this course we will primarily use a K-State email group (cc110-help or cc110-help@ksuemailprod.onmicrosoft.com) to communicate. Email sent to this address is forwarded to all instructors and TAs. Our replies to you will also be shared amongst the instructors and TAs so we all have access to the assistance you have already received. We will respond to you within a business day So a question emailed Friday night may not receive an answer before Monday.\nIf you wish to pose a discussion topic to you classmates, you should use the discussion feature in Canvas. Please note that asking a question on a discussion forum is not the same as emailing cc110-help; we will certainly monitor the discussion channels, but not with the same speed as the “help line”. Please read and adhere to the guidance on Netiquette in the syllabus for all electronic communications.\n[Slide 4]\nIn addition to email and Canvas, we’ll be using the online learning platform Codio for most of the programming tutorials and projects in this program. We’ll also discuss how to use Codio later in this module.\n[Slide 5]\nThe Computational Core program consists of several courses, and each course contains a number of learning modules. There are about 30 modules in this course. Each module will usually consist of some lecture material and quizzes, and there are a few modules which include a programming component. The modules themselves are gated, which means that you must complete each item in the module in order before continuing. In addition, the modules enforce prerequisite requirements from other modules. For CC 110 you must complete them in order starting with module 0, the enroll module should be completed first, but is not a prerequisite.\nYou are welcome to work on this course at any time during the week as your schedule allows, provided that you complete each module before the listed due date. There will be roughly two modules due each week. The modules are self-contained, and nearly all of the grading in this course is completed automatically through Canvas and Codio. So, you can complete modules at any time before the due date, and once a module is complete, you may immediately start on the next one.\n[Slide 6]\nLooking ahead to the rest of this introductory module, you’ll see that there are a few more items to be completed before you can move on. In the next video, we’ll discuss a bit more information about navigating through this course on Canvas and using the Codio learning environment.\n[Slide 7]\nOne thing we highly encourage each of you to do is read the syllabus for this course in its entirety, and let us know if you have any questions. My view is that the syllabus is a contract between me as your teacher and you as a student, defining how each of us should treat each other and what we should expect from each other. We have made a few changes to the standard syllabus template for this program, and those changes are clearly highlighted. Finally, the syllabus itself is subject to change as needed as we adapt this program to meet the needs of its students, and all changes will be clearly communicated to everyone before they take effect.\n[Slide 7]\nOne very important part of the syllabus that every student should read is the late work policy. First off, each module has a due date, and you may work on that module at any time before it is due, provided you have met the prerequisites. As discussed before, you must do all the readings and assignments in a module in listed order before moving on, so you cannot jump ahead. A module is considered completed when all items have been completed.\nFor the purposes of grading, we will use the date and time that the confirmation quiz was submitted at the end of each module to determine when the module was completed. This is due to the way that Codio handles automated grading, as it may resubmit previously graded assignments if an error in the module is corrected, making a previously completed assignment appear to be submitted late.\nIf any work is submitted after the due date, a penalty of 10% of the total points possible in that assignment will be deducted for each day it is late, up to a maximum of 3 days. After 3 days beyond the due date, you will receive a 0 on the assignment. Please refer to the full late policy in the syllabus for more information about how late work is handled in this course.\nFinally, even if a module is late, it still must be completed before you can move on to a later module. So, it is very important to avoid getting behind in this course, as it can be very difficult to get back on track. If you ever find that you are struggling to keep up, please don’t be afraid to contact either the instructors or GTAs for assistance. We’d be happy to help you get caught back up quickly.\nIn this program, the standard “90-80-70-60” grading scale will apply, though I reserve the right to curve grades up to a higher grade level at my discretion. Therefore, you will never be required to get higher than 90% for an A, but you may get an A if you score slightly below 90% if I choose to curve the grades.\nThis is intended to be a completely online, self-paced course. There are no mandatory scheduled course times. All of the content is available online, so you can work whenever and wherever you want. It could be a 3-hour block once a week, or a few minutes here and there between classes. It’s really up to you and your schedule. However, remember that each module may require 4 to 6 or more hours of work to complete, so make sure you have plenty of time available to devote to this course.\nAlso, a vast majority of the grading in this course will be handled automatically through Canvas and Codio. This means that you’ll be able to receive feedback directly from those systems as soon as you submit your work. You may also contact the instructors and GTAs for additional tips and feedback regarding your work, but depending on the number of students in the program, we may not be able to review every student submission directly.\nIn addition, due to the flexible online format of this class, there won’t be any long lecture videos to watch. Instead, each module will consist of a guided tutorial and several short videos, each focused on a particular topic or task. Likewise, there won’t be any textbooks required, since all of the information will be presented in the interactive tutorials through Codio. Finally, since we are using Codio as our learning platform, you won’t have to deal with installing and using a clunky integrated development environment, or IDE, just to learn how to program. Codio helps make learning to program quick and painless by moving everything to the web.\nFor this course, the only supplies you’ll need as a student are access to a modern web browser and a broadband internet connection. No other special hardware or software is necessary!\nFinally, as you are aware, this course is always subject to change. This is a relatively new program here at K-State, and we’re always working on new and interesting ideas to integrate into the courses. The best advice I have is to look upon this graphic with the words “Don’t Panic” written in large, friendly letters. If you find yourself falling behind, or not understanding seek our help via cc110-help.\nSo, to complete this module, there are a few other things that you’ll need to do. The next step is to watch the video on navigating Canvas and Codio, which will give you a good idea of how to most effectively work through the content in this course.\nTo get to that video, click the “Next” button at the bottom right of this page.\n",
    "description": "",
    "tags": null,
    "title": "Course Introduction - Spring 2022",
    "uri": "/00-introduction/01-introduction/"
  },
  {
    "content": "Big Ideas Guide MOD - Modularity VAR - Variables CON - Control IOC - Impact of Computing Computational Thinking Practices Guide CT1 - Program Design \u0026 Algorithm Development CT2 - Code Logic CT3 - Code Implementation CT4 - Code Testing CT5 - Documentation Reference: AP Course and Exam Description\nCR 1 - Resources Students and teachers have access to a college-level computer science textbook in print or electronic format.\nThe primary teaching resource in this course is Fundamental Computer Programming Concepts, an eTextbook authored by K-State faculty. The textbook consists of lecture material and videos developed and presented by K-State faculty, as well as an annotated bibliography of additional readings and videos from across the internet on each topic. The textbook is used in a college-level course taught at K-State:\nCC 210 - Fundamental Computer Programming Concepts The textbook can be found online at:\nPrimary Link: https://textbooks.cs.ksu.edu/cc210/ Alternate Link: https://ksu-cs-textbooks.github.io/cc210/ Authors \u0026 Contributors: https://core.cs.ksu.edu/authors/ Students will be directed to additional online resources such as official language documentation and tutorials.\nCR 2 - Develop Understanding of Content The course provides opportunities to develop student understanding of the required content outlined in each of the units described in the AP Course and Exam Description (CED)\nCR 3 - Develop Understanding of Big Ideas The course provides opportunities to develop student understanding of the big ideas, as outlined in the AP Course and Exam Description (CED).\nCR 4 - CT Practice 1: Program Design \u0026 Algorithm Development The course provides opportunities for students to develop the skills related to Computational Thinking Practice 1: Program Design and Algorithm Development, as outlined in the AP Course and Exam Description (CED).\nCR 5 - CT Practice 2: Code Logic The course provides opportunities for students to develop the skills related to Computational Thinking Practice 2: Code Logic, as outlined in the AP Course and Exam Description (CED).\nCR 6 - CT Practice 3: Code Implementation The course provides opportunities for students to develop the skills related to Computational Thinking Practice 3: Code Implementation, as outlined in the AP Course and Exam Description (CED).\nCR 7 - CT Practice 4: Code Testing The course provides opportunities for students to develop the skills related to Computational Thinking Practice 4: Code Testing, as outlined in the AP Course and Exam Description (CED).\nCR 8 - CT Practice 5: Documentation The course provides opportunities for students to develop the skills related to Computational Thinking Practice 5: Documentation, as outlined in the AP Course and Exam Description (CED).\nCR 9 - Lab Experiences This course provides students with hands-on lab experiences to practice programming through designing and implementing computer-based solutions to problems.\nMin 20 hours\n",
    "description": "",
    "tags": null,
    "title": "AP Syllabus",
    "uri": "/z-ap-alignment/01-syllabus/"
  },
  {
    "content": "1\nThe Java programming language was originally developed by Sun Microsystems starting in the early 1990s as Oak, a new programming language designed to build upon the ideas of C++. Oak would be object-oriented and include a garbage collector, both things that were seen as weak points of the C++ language at that time. In addition, it would be designed to be portable across many different types of devices.\nEventually, the language was renamed to Java, and was originally used develop applications that could run on a website. These Java applets for the web were very popular in the late 1990s and early 2000s, but most of them have since been replaced by JavaScript code that can run directly in the web browser.\nJava vs. JavaScript While Java and JavaScript may share a common-sounding name, they are in fact completely unrelated languages. JavaScript was originally named Mocha and then LiveScript, but was rebranded to JavaScript in 1995. That move was widely regarded as a marketing ploy to take advantage of the fact that Java was the most popular new language at the time.\nIn fact, today JavaScript is just one of many implementations of a language standard known as ECMAScript. However, the name confusion still exists.\nSince that time, Java has grown into its own fully-fledged programming language, and has indeed met its goal of being highly portable. Java today can run on most major computer operating systems through the use of the Java Runtime Environment (JRE) and Java Virtual Machine (JVM). In addition, the Android mobile operating system uses the Java programming language, and it has been used on many web servers and in consumer electronics.\nFor software developers, the Java Development Kit (JDK) provides easy access to all of the tools needed to develop programs using the Java language. Once a program is developed, the Java compiler converts the program to Java bytecode, which is similar to machine-code. That Java bytecode can then be run on any compatible platform using the JVM. This allows Java to achieve true portability. The only part of the system that must be specific to the computer’s hardware and operating system is the JVM, while Java bytecode can be used on any system with a compatible JVM installed.\nToday, the OpenJDK project handles all development of the Java platform, and the language and all supporting code is free and open source.\nIf none of these features in the history of Java make any sense at this point, that’s OK! It’s difficult to describe the differences between programming languages without getting technical. However, that is a good thing for us, since nearly every programming language can be used to create the programs we’ll be writing in this course. The differences aren’t really important at this point!\nNow that we’ve covered the basics, let’s get right down to it and create our first program in Java!\nResources Java Homepage OpenJDK Java Documentation File:Java_programming_language_logo.svg. (2018, May 26). Wikipedia. Retrieved 13:46, December 10, 2018 from https://en.wikipedia.org/w/index.php?title=File:Java_programming_language_logo.svg\u0026oldid=872323259. ↩︎\n",
    "description": "",
    "tags": null,
    "title": "History of Java",
    "uri": "/01-object-oriented-programming/07-java/01-history-of-java/"
  },
  {
    "content": "1\nPython was originally developed in the late 1980s and early 1990s by Guido van Rossum as a successor to the ABC programming language used at the research lab where he worked. Some initial goals of this language were to be able to interface with the Amoeba operating system and to include functions for exception handling.\nGuido \u0026 Monty According to the official Python FAQ, Python was named in honor of Monty Python’s Flying Circus, as Guido van Rossum was reading scripts from the TV show while he was originally implementing parts of Python. He needed a “short, unique, and slightly mysterious” name, so it stuck.\nThe Python community for years referred to van Rossum as “Benevolent Dictator for Life” (BDFL) to denote his place as lead developer, a role from which he stepped down in 2018.\nSeveral initial versions of Python were released throughout the 1990s, but a major update came with the release of Python 2.0 in 2000. Much of the existing Python code base is written for Python 2.X. However, the Python Software Foundation stopped supporting Python 2.X in December 2019.\nPython 3, was released in 2008, is the current supported version. It includes several structural changes to the language that made it incompatible with earlier versions. There are some automated tools available to translate Python 2 code to Python 3.\nPython is a multi-paradigm approach. It includes features from object-oriented programming, functional programming, and more.\nIn this course, we’ll deal exclusively with Python 3. As such, we’ll need to be careful to use the correct Python 3 documentation and interpreter, or else we may have issues. We’ll discuss this a bit more fully later in this module.\nIf none of these features in the history of Python make any sense at this point, that’s OK! It’s difficult to describe the differences between programming languages without getting technical. However, that is a good thing for us, since nearly every programming language can be used to create the programs we’ll be writing in this course. The differences aren’t really important at this point!\nNow that we’ve covered the basics, let’s get right down to it and create our first program in Python!\nResources Python Homepage Python 3.10 Documentation File:Python logo and wordmark.svg. (2015, June 29). Wikimedia Commons, the free media repository. Retrieved 20:41, December 12, 2018 from https://commons.wikimedia.org/w/index.php?title=File:Python_logo_and_wordmark.svg\u0026oldid=164598673. ↩︎\n",
    "description": "",
    "tags": null,
    "title": "History of Python",
    "uri": "/01-object-oriented-programming/07-python/01-history-of-python/"
  },
  {
    "content": "Chapter 1 Object-Oriented Programming Representing Real-World Objects in Code\n",
    "description": "",
    "tags": null,
    "title": "Object-Oriented Programming",
    "uri": "/01-object-oriented-programming/"
  },
  {
    "content": "Welcome to Codio! For this class, we’ll be using Codio for most of our work. You will access Codio via the links provided in your class materials.\nEach module will contain Codio tutorials, Codio projects and occasionally a quiz or discussion.\nClick the Next button below, or the Right Arrow at the top of this page, to continue to the next guide page in this Codio project.\n",
    "description": "",
    "tags": null,
    "title": "Welcome to Codio",
    "uri": "/0a-codio-intro/01-welcome/"
  },
  {
    "content": "As with any learning adventure, we must begin somewhere. When learning how to write computer programs, one of the best questions to tackle first is “what is programming?” As it turns out, the answer to that question is key to understanding exactly what it is we are trying to learn.\nA Simple Computer Video Materials\nAt its core, a computer is simply an electronic device that is capable of following instructions to perform calculations. In computer science theory, there is a special kind of theoretical computer called a Turing Machine that represents the simplest version of a modern computer. It might look something like this, as imagined by an artist:\n1\nA Turing Machine consists of an infinitely long tape that can be used to store data, and a small control box that manipulates the tape. The control box knows how to perform a few simple instructions, such as “Move Left” or “Write 0.” So, to program a Turing Machine, we must simply tell the control box which instructions to follow, and it can do it. For example, if we want the Turing Machine to write “101” on the tape, we could write the following program:\nWrite 1 Move Right Write 0 Move Right Write 1 Stop Seems simple enough. We won’t go into the details here, but computer scientists have been able to prove that any computer program that can run on a real computer could also be performed on a Turing Machine, as long as the Turing Machine has infinite time and an infinitely long tape.\nThis video shows an example of what a Turing Machine might look like in real life.\nSo, all we really need to learn is how to write programs for a Turing Machine, right?\nA Modern Computer 2\nWell, it’s unfortunately not that simple. There are two major differences between a Turing Machine and a modern computer that we must deal with. First, a modern computer knows many more instructions than a Turing Machine. To learn how to write programs that a modern computer can understand, we’d have to learn an entirely different vocabulary of commands. At the same time, modern computers are very complex systems, so any program we write might not be very efficient at doing what we want.\nSo, to learn how to write computer programs quickly and easily, we really want to be able to do two things:\nUse a vocabulary of commands that are familiar to us Have those commands turn into programs that run efficiently on a modern computer Compilers \u0026 Interpreters to the Rescue! 3\nDeveloping computer programs was very difficult work in the 1950s, and many of those early programmers were looking for a better way to solve that exact problem. One of these was Rear Admiral Grace Hopper, shown above. Her team was one of the first to develop the idea of writing computer programs using English words, and then using a second program, which they called a compiler, to convert those English words into instructions a computer could understand.\nTheir compiler made developing computer programs much simpler, since programmers didn’t have to learn an entirely new vocabulary to tell the computer what to do. Instead programmers simply had to learn the rules of what a computer could and couldn’t understand, and the syntax, or grammar rules, of how the compiler expected the program to be written. These new programming languages that use English words are referred to as high-level languages.\nProgrammers would now write the source code for the program in a high-level language, and then use a compiler to generate the machine code that the computer would actually run. In addition, since the compiler was a program itself, it could make sure the machine code it generated was as fast and efficient as possible, eliminating lots of hard work programmers would have to perform to tailor each program to fit the hardware it was going to run on.\nToday, programming languages such as C, C++, and Java use compilers to convert source code into machine code.\n4\nAt the same time, other developers such as Steve Russell, shown above, were working on another type of program, called an interpreter, to solve the same problem. An interpreter can read source code and immediately tell the computer what steps to perform, without needing to generate the whole machine code first. This makes it much easier to write and edit programs on the fly, as the interpreter reads the source code directly each time the program runs. Today, programming languages such as PHP, JavaScript, and Python use interpreters to run the source code on a computer.\nProgramming So, programming is simply the act of writing computer code in a way that a computer can run it. In most cases today, that means developing the source code for a program in a high-level language, then using either a compiler to generate the machine code for that program, or an interpreter to run the program directly on the computer from the source code. Of course, we can always write machine code by hand, but that is quite a bit more difficult.\nIn this class, we’ll learn how to write source code in one of two common languages, Java and Python. They both have their own unique features, especially since Java is a compiled language and Python is an interpreted language. However, as we saw above with the Turing Machine example, each language can be used to write any computer program. So, the choice of language is really more about personal preference and the unique features of each language than anything else.\nThis makes sense, because in general we can use both English and Spanish, as well as most other languages today, to express the same thoughts and ideas, even if we may not always have a word with the same meaning in both languages.\nFile:Maquina.png. (2014, March 4). Wikimedia Commons, the free media repository. Retrieved 15:31, December 10, 2018 from https://commons.wikimedia.org/w/index.php?title=File:Maquina.png\u0026oldid=118120539 ↩︎\nFile:Desktop computer clipart - Yellow theme.svg. (2018, July 11). Wikimedia Commons, the free media repository. Retrieved 15:44, December 10, 2018 from https://commons.wikimedia.org/w/index.php?title=File:Desktop_computer_clipart_-_Yellow_theme.svg\u0026oldid=310624404 ↩︎\nFile:Commodore Grace M. Hopper, USN (covered).jpg. (2018, July 21). Wikimedia Commons, the free media repository. Retrieved 15:51, December 10, 2018 from https://commons.wikimedia.org/w/index.php?title=File:Commodore_Grace_M._Hopper,_USN_(covered).jpg\u0026oldid=311956355 ↩︎\nFile:Steve Russell.jpg. (2017, December 28). Wikimedia Commons, the free media repository. Retrieved 16:05, December 10, 2018 from https://commons.wikimedia.org/w/index.php?title=File:Steve_Russell.jpg\u0026oldid=274743269 ↩︎\n",
    "description": "",
    "tags": null,
    "title": "What is Programming?",
    "uri": "/01-object-oriented-programming/01-what-is-programming/"
  },
  {
    "content": " Resources Codio Documentation Video Script This course makes extensive use of several features of Canvas which you may or may not have worked with before. To give you the best experience in this course, this video will briefly describe those features and the best way to access them.\nWhen you first access the course on Canvas, you will be shown this homepage. It contains quick links to the course syllabus and Piazza discussion boards. This is handy if you just need to jump to a particular area.\nLet’s walk through the options in the main menu to the left. The first section is Modules, which is where you’ll primarily interact with the course. You’ll notice that I’ve disabled several of the common menu items in this course, such as Files and Assignments. This is to simplify things for you as students, so you remember that all the course content is available in one place.\nWhen you first arrive at the Modules section, you’ll see all of the content in the course laid out in order. If you like, you can minimize the modules you aren’t working on by clicking the arrow to the left of the module name. I’ll do so, leaving the introductory module open.\nAs you look at each module, you’ll see that it gives quite a bit of information about the course. At the top of each module is an item telling you what parts of the module you must complete to continue. In this case, it says “Complete All Items.” Likewise, the following modules may list a number of prerequisite modules, which you must complete before you can access it.\nWithin each module is a set of items, which must be completed in listed order. Under each item you’ll see information about what you must do in order to complete that item. For many of them, it will simply say view, which means you must view the item at least once to continue. Others may say contribute, submit, or give a minimum score required to continue. For assignments, it also helpfully gives the number of points available, and the due date.\nLet’s click on the first item, Course Introduction, to get started. You’ve already been to this page by this point. Many course pages will consist of an embedded video, followed by links to any resources used or referenced in the video, including the slides and a downloadable version of the video. Finally, a rough video script will be posted on the page for your quick reference.\nWhile I cannot force you to watch each video in its entirety, I highly recommend doing so. The script on the page may not accurately reflect all of the content in the video, nor can it show how to perform some tasks which are purely visual.\nWhen you are ready to move to the next step in a module, click the Next button at the bottom of the page. Canvas will automatically add Next and Previous buttons to each piece of content which is accessed through the Modules section, which makes it very easy to work through the course content. I’ll click through a couple of items here.\nAt any point, you may click on the Modules link in the menu to the left to return to the Modules section of the site. You’ll notice that I’ve viewed the first few items in the first module, so I can access more items here. This is handy if you want to go back and review the content you’ve already seen, or if you leave and want to resume where you left off. Canvas will put green checkmarks to the right of items you’ve completed.\nContinuing down the menu to the left, you’ll find the usual Canvas links to view your grades in the course, as well as a list of fellow students taking the course.\n===\nNow, let’s go back to Canvas and load up one of the Codio projects. To load the first Codio projects, click the Next button at the bottom of this page to go to the next part of this module, which is the Codio Introduction tutorial. On that page, there will be a button to click, which opens Codio in a new browser window or tab.\nOnce Codio loads, it should give you the option to start the Guide for that module. You’ll definitely want to select that option whenever you load a Codio project for the first time.\nFrom there, you can follow the steps in that guide to learn more about the Codio interface. The first page of the guide continues this video. I’ll see you there!\n",
    "description": "",
    "tags": null,
    "title": "Navigating Canvas \u0026 Codio",
    "uri": "/00-introduction/02-navigating-canvas-codio/"
  },
  {
    "content": "Each module in Canvas will usually contain two Codio tutorial assignments. Some weeks may have more; in any event module content must be accomplished in order.\nThe first tutorial is a programming language agnostic discussion of the concept the module introduces. Often this tutorial introduces pseudo code, has questions and may contain a Parsons Puzzle. Most of the questions only allow one attempt, however Parsons Puzzles will allow multiple tries. The second tutorial will contain your language specific implementation of this concept; the syntax (format) and semantics (behavior/meaning) of the specific keywords. This tutorial may include a programming example as well as a programming exercise. In these Codio tutorials, there will be several pages of content introducing the material for that module. Some of the pages will look just like this one, with text, images, and maybe even a short video to help you learn the material.\nIf you’d like to see an outline of the pages available as part of this module, click the “hamburger” menu button at the top-right of the page.\nSome of the pages may also include short questions to check for understanding of the material. You’ll need to answer these questions as they appear in order to get points for completing the tutorial module. Remember that the tutorials make up part of your grade in this course, so make sure you answer all of the questions in the tutorial module before submitting it. In some cases, you’ll be able to resubmit your answers until you get a correct answer, but other questions will not allow that.\nIn fact, below is a quick example of what one of those questions would be like. Take a moment to answer the question correctly, then continue to the next page of this module. For those of you unfamiliar with the work of Douglas Adams, the answer is forty-two.\nWeb Only This content is presented in the course directly through Codio. Any references to interactive portions are only relevant for that interface. This content is included here as reference only.\n",
    "description": "",
    "tags": null,
    "title": "Codio Tutorials",
    "uri": "/0a-codio-intro/02-tutorials/"
  },
  {
    "content": " Video Materials\nAccording to tradition, the first computer program that we cover in any language is a simple program called “Hello World!” The entire goal of the program is to demonstrate what it takes to create our first program from scratch in the language and get to the point where we can print the message of our choice to the screen. While that sounds very simple, it is actually a pretty big first step toward learning how to write our own programs. Let’s get started!\nHelp! If this is your first-time programming, it can be quite daunting to know where to get started. This guide will walk you through all the steps to create your first program. However, if you have any questions at all, don’t be afraid to seek help. It’s much easier to answer questions up front when they come up, instead of dealing with them down the road when you are truly lost.\nIf you are a Kansas State University student, both your syllabus and the course canvas pages will have information on how to requests help, attend office hours, etc.\nSome Terminology In any programming language, there is a bit of terminology that we should discuss before diving in. Here are a few terms we’ll want to be familiar with at this point:\nkeyword - in any programming language, a keyword is a word that has a special meaning. These words tell the program exactly what to do, and we cannot use these words as identifiers. Consult the Java Language Keywords list to determine which words are keywords in Java. identifier - any class, method, or variable name is considered an identifier. declaration - in a programming language, we use special lines to declare that something exists. In this example, we’ll see both a class declaration and a method declaration. body - following a declaration, we typically find the body of the declared item. The body is enclosed by braces. braces - in Java, we use braces or curly braces, denoted by { and }, to enclose blocks of code. We’ll use these to enclose both the class body and method body. Declaration vs. Definition Formally, a Declaration associates an identifier with a program language element.\npublic class Pet; // a declaration // tells the compiler that there will be a class called Pet // Java will not support a class declaration this way A Definition includes the complete information about the program element. So for a class, a definition includes its body.\npublic class Pet { ... some code for the body // a definition // like a declaration with all the info about the class } Some older languages (notably C) allowed things to be declared and used before they were defined. However, Java does not support this style of coding. As a result, Java documentation and developers tend to use “declaration” for both declaration and definition.\nOpen a File To begin, there should see a file named HelloWorld.java open in the panel to the left. If not, click on that file in the file tree to the far left to open it. Make sure that file is open for this example, since the file name must match in order for this process to work properly.\nAlso, we should make sure that the file is completely empty before moving on. If there is any text currently in that file, take the time to delete it now.\nWe can also do these same steps on a computer with the Java Development Kit installed. Simply create a new, blank text file named HelloWorld.java.\nCreate a Class Java is an object-oriented programming language. We’ll discuss this more in detail in a later module, but for now we’ll just need to know that Java requires all of our code to be placed in a class. So, at the very top of our file, we’ll enter the following line:\npublic class HelloWorld That line called a class declaration in Java. Let’s break that line down and discuss what each part means:\npublic - this keyword is used to identify that the item after it should be publicly accessible to all other parts of the program. In a later module, we’ll talk about these keywords, called access modifiers, and the impact they have on our programs. For now, we’ll just use public whenever we need an access modifier, such as in a class declaration. class - this keyword says that we are declaring a new class. HelloWorld - this is an identifier that gives us the name of the class we are declaring. Java requires that the class name matches the filename that it is stored in, so we must store the HelloWorld class in a file named HelloWorld.java. Every Java program must contain at least one class declaration. In fact, each Java file we create will contain at least on class declaration, so we’ll see this structure repeated very often.\nToo Much Information? Unfortunately, when learning to program in Java, there are a few things that we’ll just have to take for granted for now until we learn a bit more about how they actually work. Class declarations are a great example of this. For the next several modules, we’ll just have to include a class declaration at the top of each file without understanding everything about them. As long as we make sure the identifier matches the name of the file, it should work just fine. In fact, in most of the later examples in this book, we’ll have some sample code in each file that includes the class declaration.\nWe’re covering it in detail here just to make sure it is clear what is going on at first. It’s always better to have too much information than not enough.\nClass Body Once we’ve completed our class declaration, we need to move on to the class body. The class body is where all of the information about the class is stored. In Java, we use braces to enclose a block of code, such as a body. So, let’s modify our file to look like the following example by adding an opening brace { and a closing brace } with a few empty lines in between. Instead of copy-pasting it, try to type it in yourself and see what happens!\npublic class HelloWorld { } Did you notice how the editor in Codio automatically added a closing brace right after you typed the opening brace? That’s the power of using a text editor that is tailored for programming. It should have also indented all of the lines between the two braces a bit, making it easier to read your code as we continue to fill it in. It may seem a bit jarring a first, but you’ll quickly get used to it. We’ll see it happen again later in this example.\nStyle Guide To make your code easier to read, many textbooks and companies use a style guide that defines some of the formating rules that you should follow in your source code. However, this is a point of contention, and many folks disagree over what is the best format. These formatting rules do not affect the actual code itself, only how easy it is to read.\nFor this book, most of the examples will be presented in a variant of the K\u0026R Style used by most Java developers, which places the opening brace on the same line as the declaration, but the closing brace is placed on a line by itself and indented at the same level as the declaration. The code inside will be indented by four spaces.\nGoogle provides a comprehensive style guide that is recommended reading if you’d like to learn more about how to format your source code.\nMain Method Inside of our class body, we must create a main method. A method is a piece of code that performs an action in our program. Methods are sometimes referred to as functions or subroutines as well, but we’ll use the term method. Each Java program have one class that contains at least one special method, called the main method, that tells the program where to start. So, let’s modify our file to the left to look like this example:\npublic class HelloWorld { public static void main(String[] args){ } } We just added a method declaration and method body to our program! Let’s look at some of the keywords we used here:\npublic - just like before, we are using the public access modifier to allow any part of our program to access this method. static - the static keyword is one of the more difficult to understand, and even some experienced programmers struggle with it. In this example, we must use static since this is the main method, which must always be a static method. This is because we aren’t using this method inside of an object, which we’ll cover in a much later module. For now, every method we create will use a static keyword. void - this describes what kind of data this method should output. Since this is the main method, it cannot output anything to another part of the program, so we use the special void keyword to denote the fact that it doesn’t output anything. (At least, it doesn’t output anything to the rest of the program, but it may display things on the screen!) main - this is another identifier that gives the name of the method. Since our program needs to have at least one main method, we need to use main as the name of this method. (String[] args) - following the method name is a section in parentheses that defines the inputs, or parameters, for the method. The main method must take in one parameter, an array of Strings. By convention, we use the identifier args as the name of that parameter. We’ll learn more about parameters, Strings, and arrays, in a later module. For now, we’ll just have to remember that the main method must have this exact set of parameters. Lastly, we included a second set of braces to enclose the method body. Notice how everything in the class body is indented slightly, making it easy to see the structure of the code.\nFor now, we’ll just have to memorize the fact that the main method in Java is declared using public static void main(String[] args). As we move through this book, we’ll slowly learn more about each part of that line and what it does, and it will make much more sense.\nSaying Hello Finally, we can write our code. The actual code of our program goes inside the main method’s body, between the two braces. In the classic “Hello World!” example, we simply want to print the words “Hello World!” to the screen. So, let’s modify our program one last time to look like this example:\npublic class HelloWorld{ public static void main(String[] args){ System.out.println(\"Hello World\"); } } As you typed in that information, you might have noticed that Codio also added a second set of quotation marks \", just like it did with the braces earlier. This is another example of a programmer-friendly text editor at work!\nLet’s review what we just added to our program:\nSystem.out.println - this line tells us that we’d like to use a method called println in the System.out PrintStream object. Again, that means very little to us right now, but for now we’ll need to know to use this method to print a line of text to the screen. Following the name of the method is a set of parentheses that accepts input to the method, which is what we’d like to have printed to the screen. \"Hello World\" - by putting this in the parentheses after System.out.println, we are telling the println method in System.out to print Hello World to the screen. We have to enclose it in quotation marks \" so that our program will treat it as a line of text and not more Java code. The values, or variables passed to a method are referred to as the method’s parameters. ; - each line of code in Java must end with a semicolon ;. This helps the compiler determine where one line of code ends and another begins. They really serve the same purpose as the period . in written English. However, periods are already used for other purposes in Java, so the semicolon became the standard symbol for the end of each line of code. That’s it! That’s all it takes to write our first program in Java. On the next page, we’ll learn how to actually compile and run this program using Codio.\n",
    "description": "",
    "tags": null,
    "title": "Hello World",
    "uri": "/01-object-oriented-programming/07-java/02-hello-world/"
  },
  {
    "content": " According to tradition, the first computer program that we cover in any language is a simple program called “Hello World!” The entire goal of the program is to demonstrate what it takes to create our first program from scratch in the language, and get to the point where we can print the message of our choice to the screen. While that sounds very simple, it is actually a pretty big first step toward learning how to write our own programs. Let’s get started!\nHelp! If this is your first time programming, it can be quite daunting to know where to get started. This guide will walk you through all the steps to create your first program. However, if you have any questions at all, don’t be afraid to seek help. It’s much easier to answer questions up front when they come up, instead of dealing with them down the road when you are truly lost.\nIn this program, you can use the you can use the course discussion forums or email list to ask for help. You may also find information about help sessions and open office hours posted there. That should always be your first place to go when you get stuck.\nGood luck!\nSome Terminology In any programming language, there is a bit of terminology that we should discuss before diving in. Here are a few terms we’ll want to be familiar with at this point:\nkeyword - in any programming language, a keyword is a word that has a special meaning. These words tell the program exactly what to do, and we cannot use these words as identifiers. Consult the Python Language Keywords list to determine which words are keywords in Python. built in functions - in addition to keyword, Python has a list of built in functions, the names of these functions should be treated as keywords–don’t use them as identifiers. Consult the Python Built in Functions list to determine the names you should avoid. print is a built in function. Open a File To begin, there should see a file named HelloWorld.py open in the panel to the left. If not, click on that file in the file tree to the far left to open it. Make sure that file is open for this example, since the file name must match in order for this process to work properly.\nAlso, we should make sure that the file is completely empty before moving on. If there is any text currently in that file, take the time to delete it now.\nWe can also do these same steps on a computer with Python installed. Simply create a new, blank text file named HelloWorld.py.\nimport sys class HelloWorld: @staticmethod def main(args): ## Your Code goes below ## Your code goes above if __name__ == \"__main__\": HelloWorld.main(sys.argv) Lets take a quick look at the starter code.\nclass HelloWorld: starts the class definition. By convention, class names in Python follow PascalCase, each \"word\", including the first is capitalized and spaces are omitted. Also by convention, the file name and class name are the same. @staticmethod def main(args):def main() starts the definition of the main method. Python convention is that method names (function names) are in camelCase. Object oriented convention is that the main() method is static (more on this about module 10). # WRITE YOUR CODE HEREThrough module 5, you will just be adding code to the main() method. These comments are a guide to help you get the code in the right place. There is no connection between the number of blank lines and the number of lines of code you will need to write. if __name__ == ...By convention, object oriented programs start in the main method, this code accomplishes that. Saying Hello Finally, we can write our code. The remaining code of our program goes right inside the definition of main() . In the classic “Hello World!” example, we simply want to print the words “Hello World!” to the screen. So, let’s add the following code to that file. To fully see how this example works, we should manually type the code into the file instead of copying and pasting it:\nprint(\"Hello World!\") Did you notice how the editor in Codio automatically added a closing parenthesis right after you typed the opening parenthesis? That’s the power of using a text editor that is tailored for programming. It should have also done the same for the quotation marks. It may seem a bit jarring a first, but you’ll quickly get used to it.\nLet’s review what we just added to our program:\nprint - this line tells us that we’d like to use a method called print(), which is a built-in method in Python. That means very little to us right now, but for now we’ll need to know to use this method to print a line of text to the screen. Following the name of the method is a set of parentheses that accepts input to the method, which is what we’d like to have printed to the screen. \"Hello World\" - by putting this in the parentheses after print, we are telling the print() method to print the litteral value Hello World to the screen. We have to enclose it in quotation marks \" so that our program will treat it as a line of text and not more Python code. Style Guide To make your code easier to read, many textbooks and companies use a style guide that defines some of the formating rules that you should follow in your source code. In Python, these rules are very important, as the structure of your code is defined by the layout. We’ll learn more about that in a later module.\nFor this book, most of the examples will be presented using the guidelines in the Style Guide for Python. However, by default Codio used to use 4 spaces for an indentation level instead of 2, so that is the format that will be used in some examples in this book.\nGoogle also provides a comprehensive style guide that is recommended reading if you’d like to learn more about how to format your source code.\nThat’s it! That’s all it takes to write our first program in Python. On the next page, we’ll learn how to actually run this program using Codio.\n",
    "description": "",
    "tags": null,
    "title": "Hello World",
    "uri": "/01-object-oriented-programming/07-python/02-hello-world/"
  },
  {
    "content": " This section introduces Program State, a concept key to understanding how the computer is processing your program. Being able to estimate program state allows us to fix bugs. Programming Languages are Rosetta Stones A programming language is a complete tool set to translate instructions written in one set of symbols to instructions written in machine binary code. Both Java and Python do this by producing an intermediate representation (byte code) then translating that to machine code. In Java’s case this byte code is saved, in Python’s it is not.\nComputer Central Processing Units (CPU) exclusively run machine code.\nIf you are going to learn to program, you need some idea of how a computer works. The most basic view of the computer is a bank of memory connected to a Central Processing Unit (CPU). Each byte in memory has its own unique address and an 8-bit value (eight 0s or 1s : 01001101). This memory is effectively split up into various regions, with instructions in one region and data in another.\nThe CPU has a limited amount of memory (enough to hold a few dozen values) called registers. It also contains all the circuity to interpret the instructions an perform mathematical and logical operations on the values stored in the registers.\nConsider the following program, Z = 5 + 7, which instructs the computer add the values of 5 and 7 and save the value into a variable (memory location). In machine language this many more commands, a simplification might be:\nInstruction Meaning LVal eax, 0x01A0 Load the value found at memory loc 0x01A0 into reg eax This is where “5” is stored LVal ebx, 0x01A8 Load the value found at memory loc 0x01A8 into reg ebx This is where “7” is stored Add eax, ebx Add the values in registers eax and ebx together and store the result back into eax Mov eax, 0x01B0 Move the value in register eax to memory location 0x01B0 This is where the variable Z is stored Pretty ugly, but this is how the CPU gets its instructions.\nEstimating Program State But from this we can come up with a pretty powerful abstraction. In programing, an abstraction is a simplified model of a complex system, keeping only the most important details to make using the model easy.\nOur abstraction will be that a program consists of an ordered list of instructions, a bunch of labeled cubbyholes for data and some pointer that keeps track of which instruction the computer is currently executing. These things, the list of instructions, the current instruction and all the values of all the variables are referred to as a program’s state.\n",
    "description": "",
    "tags": null,
    "title": "How a Computer Sees a Program",
    "uri": "/01-object-oriented-programming/02-computer-sees-program/"
  },
  {
    "content": " Resources Slides K-State IT Help Desk - Email helpdesk@ksu.edu K-State Online Canvas Help Instructure Canvas Guides Codio Documentation Codio Support K-State Libraries K-State CS Support K-State CS Advising K-State Engineering Student Services K-State Office of Student Life K-State Report It Video Script [Slide 1]\nAs you work on the materials in this course, you may run into questions or problems and need assistance. This video reviews the various types of help available to you in this course.\n[Slide 2]\nFirst and foremost, anytime you have a questions or need assistance in the Computational Core program, please email the appropriate help group. It is the best place to go to get help with anything related to this program, from the tutorials and projects to issues with Codio and Canvas. For example, if you are enrolled in CC315 and have questions, from your KSU email, you would type cc315-help and hit tab to auto-complete the email.\n[Slide 3]\nIf you have any issues working with K-State Canvas, K-State IT resources, or any other technology related to the delivery of the course, your first source of help is the K-State IT Helpdesk. They can easily be reached via email at helpdesk@ksu.edu. Beyond them, there are many online resources for using Canvas, all of which are linked in the resources section below the video.\n[Slide 4]\nIf you have any issues using the Codio platform, you are welcome to refer to their online documentation. Their support staff offers a quick and easy chat interface where you can ask questions and get feedback within a few minutes.\n[Slide 5]\nIf you have issues with the technical content of the course, specifically related to completing the tutorials and projects, there are several resources available to you. First and foremost, make sure you consult the vast amount of material available in the course modules, including the links to resources. Usually, most answers you need can be found there.\nOf course, as another step you can always exercise your information-gathering skills and use online search tools such as Google to answer your question. While you are not allowed to search online for direct solutions to assignments or projects, you are more than welcome to use Google to access programming resources such as StackOverflow, language documentation, and other tutorials. I can definitely assure you that programmers working in industry are often using Google and other online resources to solve problems, so there is no reason why you shouldn’t start building that skill now.\n[Slide 6]\nNext, we have grading and administrative issues. This could include problems or mistakes in the grade you received on a project, missing course resources, or any concerns you have regarding the course and the conduct of instructors and your peers. Since this is an online course, you’ll be interacting with us on a variety of online platforms, and sometimes things happen that are inappropriate or offensive. There are lots of resources at K-State to help you with those situations. First and foremost, please email your instructor as soon as possible and let them know about your concern, if it is appropriate for them to be involved. If not, or if you’d rather talk with someone other than your instructor about your issue, I encourage you to contact either your academic advisor, the CS department staff, College of Engineering Student Services, or the K-State Office of Student Life. Finally, if you have any concerns that you feel should be reported to K-State, you can do so at https://www.k-state.edu/report/. That site also has links to a large number of resources at K-State that you can use when you need help.\n[Slide 7]\nFinally, if you find any errors or omissions in the course content, or have suggestions for additional resources to include in the course, email the instructors. There are some extra credit points available for helping to improve the course, so be on the lookout for anything that you feel could be changed or improved.\n[Slide 8]\nSo, in summary, the content and links in the modules should always be your first stop when you have a question or run into a problem. For issues with Canvas or Codio, you are also welcome to refer directly to the resources for those platforms. For questions specifically related to the projects, use the courses help group. For grading questions and errors in the course content or any other issues, please email the instructors for assistance.\nOur goal in this program is to make sure that you have the resources available to you to be successful. Please don’t be afraid to take advantage of them and ask questions whenever you want.\n",
    "description": "",
    "tags": null,
    "title": "Where to Find Help",
    "uri": "/00-introduction/03-where-to-find-help/"
  },
  {
    "content": " On some pages, the Codio guide may also switch to a different view, shown here, allowing you to work directly with code. On the far left is the file tree, which shows all of the files accessible to you for this tutorial. Then, in the middle, you may also see one or more open files as tabs at the top of that panel. Those files are usually the ones that you need to edit to complete the example on this page. You can freely open additional files if needed in that panel, or rearrange the panels as needed. However, whenever you enter this page, it will reset the view back to the default.\nIn the first programming module of the course, we’ll discuss more information about how to use Codio to run any code that you’ve created. For now, we’ll just use text files to introduce the interface.\nOnce you’ve completed the example, most pages will include a section at the bottom that allows you to check your work. Just like the other questions, these assessments will count toward your grade on the tutorial project. See if you can complete the exercise and pass the test below. The answer is Picard.\nWeb Only This content is presented in the course directly through Codio. Any references to interactive portions are only relevant for that interface. This content is included here as reference only.\n",
    "description": "",
    "tags": null,
    "title": "Codio Examples",
    "uri": "/0a-codio-intro/03-examples/"
  },
  {
    "content": " Video Materials\nNote: the video's \"Run\" menu reference is obsolete.\nNow that we’ve written our first Java program, we must compile and run the program to see the fruits of our labors. There are many different ways to do this using the Codio platform. We’ll discuss each of them in detail here.\nTerminal Codio includes a built-in Linux terminal, which allows us to perform actions directly on a command-line interface just like we would on an actual computer running Linux. We can access the Terminal in many ways:\nSelecting the Tools menu, then choosing the Terminal option Pressing SHIFT + ALT + T in any Codio window (you can customize this shortcut in your Codio user preferences) Pressing the Open Terminal icon in the file tree Additionally, some pages may already open a terminal window for us in the left-hand pane, as this page so helpfully does. As we can see, we’re never very far away from a terminal.\nNew to Linux? No worries! We’ll give you everything you need to know to compile and run your Java programs in this course.\nIf you’d like to learn a bit more about the Linux terminal and some of the basic commands, feel free to check out this great video on YouTube:\nNote: CC 210 requires no more Linux knowledge than CC 110.\nLet’s go to the terminal window and navigate to our program. When we first open the Terminal window, it should show us a prompt that looks somewhat like this one:\nThere is quite a bit of information there, but we’re interested in the last little bit of the last line, where it says ~/workspace. That is the current directory, or folder, our terminal is looking at, also known as our working directory. We can always find the full location of our working directory by typing the pwd command, short for “Print Working Directory,” in the terminal. Let’s try it now!\nEnter this command in the terminal:\npwd and we should see output similar to this:\nIn that output, we’ll see that the full path to our working directory is /home/codio/workspace. This is the default location for all of our content in Codio, and its where everything shown in the file tree to the far left is stored. When working in Codio, we’ll always want to store our work in this directory.\nNext, let’s use the ls command, short for “LiSt,” to see a list of all of the items in that directory:\n~/workspace$ ls java README.md We should see a short list of items appear in the terminal.\nWe can use the cd command, short for “Change Directory,” to change the working directory. To change to the java directory, type cd into the terminal window, followed by the name of that directory:\n~/workspace$ cd java ~/workspace/java$ We are now in the java directory, as we can see by observing the ~/workspace/java on the current line in the terminal. Finally, we can do the ls command again to see the files in that directory:\n~/workspace/java$ ls HelloWorld.java We should see our HelloWorld.java file! If it doesn’t appear, try using this command to get to the correct directory: cd /home/codio/workspace/java.\nOnce we’re at the point where we can see the HelloWorld.java file, we can move on to actually compiling and running the program.\nCompiling in Terminal To compile a Java program in the terminal, we’ll use the javac command, short for Java Compiler, followed by the name of the Java file we’d like to compile. So, in our case, we’ll do the following:\njavac HelloWorld.java If it works correctly, we shouldn’t get any additional output. The compiler will look through our Java file and create a new file containing the Java bytecode for our program, called HelloWorld.class. We can use the ls command to see it:\nls Problems? If the javac command gives you any output, or doesn’t create a HelloWorld.class file, that most likely means that your code has an error in it. Go back to the previous page and double-check that the contents of HelloWorld.java exactly match what is shown at the bottom of the page. You can also read the error message output by javac to determine what might be going wrong in your file.\nWe’ll cover information about simple debugging steps on the next page as well. If you get stuck, now is a great time request help via your course’s help system. You aren’t in this alone!\nRunning in Terminal Finally, we can now run our program! Once it is compiled, just type the following in the terminal to run it:\njava HelloWorld That’s all there is to it! We’ve now successfully compiled and run our first Java program. Of course, we can run the program as many times as we want by repeating the previous java command. If we make changes to the HelloWorld.java file, we’ll need to recompile it using the previous javac command first. Then, if those changes instruct the computer to do something different, we should see those changes when we run the program after compiling it.\nTry It! See if you can change the HelloWorld.java file to print out a different message. Once you’ve changed it, use the javac and java commands to compile and run the updated program. Make sure you see the correct output!\nCodio Assessments Last, but not least, many of the Codio tutorials and projects in this program will include assessments that we must solve by writing code. Codio can then automatically run the program and check for specific things, such as the correct output, in order to give us a grade. For most of these questions, we’ll be able to make changes to our code as many times as we’d like to get the correct answer. Try the example below!\nWeb Only This content is presented in the course directly through Codio. Any references to interactive portions are only relevant for that interface. This content is included here as reference only.\n",
    "description": "",
    "tags": null,
    "title": "Compile and Run",
    "uri": "/01-object-oriented-programming/07-java/03-compile-and-run/"
  },
  {
    "content": " Now that we’ve written our first Python program, we must run the program to see the fruits of our labors.\nTerminal Codio includes a built-in Linux terminal, which allows us to perform actions directly on a command-line interface. We can access the Terminal in many ways:\nSelecting the Tools menu, then choosing the Terminal option Pressing SHIFT + ALT + T in any Codio window (you can customize this shortcut in your Codio user preferences) Pressing the Open Terminal icon in the file tree Additionally, some pages may already open a terminal window for us in the left-hand pane, as this page so helpfully does. As we can see, we’re never very far away from a terminal.\nNew to Linux? No worries! We’ll give you everything you need to know to run your Python programs in this course.\nIf you’d like to learn a bit more about the Linux terminal and some of the basic commands, feel free to check out this great video on YouTube:\nNote: CC-210 requires no more Linux knowledge than CC-110.\nLet’s go to the terminal window and navigate to our program. When we first open the Terminal window, it should show us a prompt that looks somewhat like this one:\nThere is quite a bit of information there, but we’re interested in the last little bit of the last line, where it says ~/workspace. That is the current directory, or folder, our terminal is looking at, also known as our working directory. We can always find the full location of our working directory by typing the pwd command, short for “Print Working Directory,” in the terminal. Let’s try it now!\nEnter this command in the terminal:\npwd and we should see output similar to this:\nIn that output, we’ll see that the full path to our working directory is /home/codio/workspace. This is the default location for all of our content in Codio, and it’s where everything shown in the file tree to the far left is stored. When working in Codio, we’ll always want to store our work in this directory.\nNext, let’s use the ls command, short for “LiSt,” to see a list of all of the items in that directory:\nls We should see a whole list of items appear in the terminal. Most of them are directories containing examples for the chapters this textbook, including the HelloWorld.py file that we edited in the last page. Thankfully, the directories are named in a very logical way, making it easy for us to find what we need. For example, to find the directory for Python examples, look for the directory named python in the output.\nFinally, we can use the cd command, short for “Change Directory,” to change the working directory. To change to the python directory, type cd into the terminal window, followed by the name of that directory:\ncd python :~/workspace$ cd python ~/workspace/python$ We are now in the python directory, as we can see by observing the ~/workspace/python on the current line in the terminal. Finally, we can do the ls command again to see the files in that directory:\nls ~/workspace/python$ ls HelloWorld.py We should see our HelloWorld.py file! If it doesn’t appear, try using this command to get to the correct directory: cd /home/codio/workspace/python.\nOnce we’re at the point where we can see the HelloWorld.py file, we can move on to actually running the program.\nRunning in Terminal To run it, we just need to type the following in the terminal:\npython3 HelloWorld.py ~/workspace/python$ python HelloWorld.py Hello World! That’s all there is to it! We’ve now successfully run our first Python program. Of course, we can run the program as many times as we want by repeating the previous python3 command. If we make changes to the HelloWorld.py file that instruct the computer to do something different, we should see those changes the next time we run the file..\nProblems? If the python3 command doesn’t give you any output, or gives you an error message, that most likely means that your code has an error in it. Go back to the previous page and double-check that the contents of HelloWorld.py exactly match what is shown at the bottom of the page. You can also read the error message output by python3 to determine what might be going wrong in your file.\nAlso, make sure you use the python3 command and not just python. The python3 command references the newer Python 3 interpreter, while the python command is used for the older Python 2 interpreter. In this book, we’ll be using Python 3, so you’ll need to always make sure you use python3 when you run your code.\nWe’ll cover information about simple debugging steps on the next page as well. If you get stuck, now is a great time to go to you can use the course discussion forums or email list to ask for assistance. You aren’t in this alone!\nTry It! See if you can change the HelloWorld.py file to print out a different message. Once you’ve changed it, use the python3 command to run the file again. Make sure you see the correct output!\nCodio Assessments Last, but not least, many of the Codio tutorials and projects in this program will include assessments that we must solve by writing code. Codio can then automatically run the program and check for specific things, such as the correct output, in order to give us a grade. For most of these questions, we’ll be able to make changes to our code as many times as we’d like to get the correct answer. Try the example below!\nWeb Only This content is presented in the course directly through Codio. Any references to interactive portions are only relevant for that interface. This content is included here as reference only.\n",
    "description": "",
    "tags": null,
    "title": "Running the Program",
    "uri": "/01-object-oriented-programming/07-python/03-running-the-program/"
  },
  {
    "content": "\nRequirements Analysis Software Development is more than just programming. It is a disciplined process of converting requirement into finished product. It consists of five phases, the first of which is requirements analysis. In requirements analysis you try and describe the problem you are trying to solve and the features you want the solution to have. Throughout CC 210, the exercise or project statement serves as the requirements analysis phase.\nDesign Next comes the design phase. In design we describe the solution. In Object-oriented programming this generally consist of designing the classes and the interactions between them which meet the requirements.\nA class is a collection of data and the methods (procedures) by which data is accessed and manipulated. Classes are generally organized around things (the shopping cart from any online store is a classic example) or functions (communication with your computer’s WIFI card is probably handled by a class). The design of many of CC 210 exercises and projects will be provided to you.\nCoding (Development) Following design is the coding phase, where programs are written to build the design. This is the emphasis area of CC 210. Students will code classes, or fragments of classes–with their associated variables and methods; and test these methods as you write them.\nLow level testing is organic to the coding process. Imagine you were writing the Goldilocks Porridge Temperature Tester, which takes as input a temperature and outputs “too hot”, “too cold” or “just right”. Better programmers would test their code with a value from each range to make certain the output is correct. When a program fails a test, it is said to have a “bug” and the process of finding and fixing bugs is called debugging.\nThe advantages of testing as you code are\nthat you develop the test cases and therefore have a good understanding of what the code is supposed to accomplish and where the problems might be. Any bugs must have been introduced or revealed by the last bit of code you wrote. So, if you follow a “code-a-little-test-a-little” approach, you can quickly narrow down the parts of the code which contain the error. If you write too much code before testing any of it, it can be hard to isolate the bugs.\nFormal Test When the coders believe they have a properly working product, the development enters the formal test phase. Generally, a separate set of developers put the software through its paces and report any bugs they find. Some of these bugs will be fixed and retested, while others may be left in the code to be addressed at a future date. When you run the autograder you have effectively entered the formal test phase.\nDeployment Finally, there is the deployment phase. This were people and systems start using your code. The analogous activity for CC 210 certifying your module is complete.\n",
    "description": "",
    "tags": null,
    "title": "The Software Development Lifecycle",
    "uri": "/01-object-oriented-programming/03-sdlc/"
  },
  {
    "content": " Resources Slides Code.org Quotes Video Script Finally, before embarking on this program, let’s take a brief minute to review what you’ll learn by the time you complete the program.\nOf course, the biggest and most impactful outcome will be learning how to write computer programs. Throughout the Computational Core program, you’ll learn either the Java or Python programming language, and get to a point where you are quite proficient with your language of choice. You’ll be capable of building your own programs from scratch to meet many of the challenges you’ll encounter in your career or elsewhere. This skill alone will set you well above your peers.\nThere are many additional benefits beyond just learning how to write programs. For starters, programming involves a large amount of problem solving and computational thinking, and these courses will help sharpen you skills in both areas. In addition to programming, you’ll also learn about software engineering methods that will help you build better programs, but also data structures and algorithms that will make your code more efficient and useful as it manipulates and stores data. Of course, you’ll also pick up some new math and logic skills, as both are vitally important to understanding computer code. Lastly, we’ll spend a bit of time discussing how computers actually work, so you can see how your code actually gets a computer to perform the tasks you desire.\nFinally, you may be asking yourself why this is important. I could absolutely bring out large numbers of statistics stating how many computer programming jobs are available right now, and how we have a distinct lack of capable graduates to fill these positions. I could also talk about how much more money you could make as a computer programmer than in many other fields. But, instead, I think it is best to just present this quote from Stephen Hawking, one of the most brilliant people to ever live:\nWhether you want to uncover the secrets of the universe, or you just want to pursue a career in the 21st century, basic computer programming is an essential skill to learn. - Stephen Hawking\nThis is just one of the many great quotes encouraging you to learn computer programming from Code.org. I highly recommend checking out their quote archive whenever you need additional inspiration.\nThat should cover all of the background information you’ll need before you start this program. The rest of this module includes the full course syllabus and a few assignments that you should read through before beginning the course, but you don’t have to do anything else for them right now. Finally, this module wraps up with a quick quiz making sure you are 100% ready to take this course.\nBest of luck to you on your adventure through this program!\n",
    "description": "",
    "tags": null,
    "title": "What You'll Learn",
    "uri": "/00-introduction/04-what-youll-learn/"
  },
  {
    "content": "Now that you’ve seen a few pages in Codio, let’s take a minute to discuss some of the features of the Codio user interface. Of course, Codio has some amazing documentation, so feel free to check that out as you work with Codio.\nFirst, let’s look at the menu items at the top of the page. There are several available to you that are worth mentioning. For starters, you can click the Codio Icon at any time to go directly to your Codio dashboard.\nUnder the Codio menu, you can also find options to manage your preferences. Here you can adjust things such as the editor settings and theme. Feel free to adjust the settings to match your personal preferences.\nThe Project menu allows you to work with the currently loaded Codio project. Generally you won’t need to access many of these items unless your project stops working. However, they are provided for your use in case you need them.\nThe File menu contains options for manipulating the file tree, such as creating new files, renaming them, saving them, and even downloading and uploading files. As you work on larger projects, you’ll be using many of these options to manage the files within your project.\nNext, the Edit menu gives you access to the Undo and Redo action.\nThe Find menu contains entries for searching documents and performing a find-and-replace operation. Most of those actions should be pretty self-explanatory.\nThe View menu allows you to customize your view in Codio. Here we’ll find options for managing panels, open tabs, editor settings, and more. Feel free to make use of these options to arrange your Codio view as you prefer. Also, at the bottom of this menu is a Play Guide option, which is very helpful if you accidentally close the guide and need to reopen it.\nUnder the Tools menu, you’ll find an option for accessing the Terminal in your project. The Terminal gives you console access to the box that your project is running on.As you work through the content in this program, we’ll slowly introduce the Terminal and some of the tasks it can perform.\nThe Education menu is very important, though it only has a single entry. The Mark as Completed option allows you to indicate that you have completed this Codio project or tutorial. Once you select that option, your work will automatically be graded and your grade will be sent to Canvas. From there, you can access the next project or module in the course.\n||| warning\nDon’t Submit Projects Accidentally! Be very careful when completing a project! Once you’ve marked a project as completed, it will become read-only, and you won’t be able to make any additional changes to the project. So, you’ll need to make sure you’ve finished everything in the project first. If you accidentally mark a project as completed, you may contact the instructors for help. Depending on the situation, they may be able to unlock it for you so you can continue your work. However, unlocking a completed project is entirely at the discretion of the instructor.\n|||\nFinally, the Help menu gives you access to many of the support features in Codio. If you get stuck, you may want to review some of the help options available here. Of course, you can always post a message in the course help forum or email for assistance! This is for help with Codio, not for help on the lesson content. In general your first request for help should be through the CC210-Help email.\nThere are also a few other items in the interface you should be aware of. First, in the File Tree, there is a Play icon that can also be used to open the guide for the current project.\nIn the guide, there are a couple of options available by clicking the gear icon in the upper-right of the page. First, there is an option to Restore Current Files. This option will restore the contents of any currently open files back to the default contents from when you first opened the project. In addition, this menu also contains another way to mark the current project as completed.\nThat covers most of the major features of the Codio interface that we’ll be using in this course. If you have any questions about how to use Codio, feel free to ask your teahers or email for assistance.\n",
    "description": "",
    "tags": null,
    "title": "Codio Interface",
    "uri": "/0a-codio-intro/04-interface/"
  },
  {
    "content": " Of course, when developing a computer program, there are always times when things don’t quite work the way we’d like them to. Let’s review a few of the common errors and how to solve them.\nCompiler Issues The Java Compiler is usually the source of most of our woes when first learning how to write programs in Java. The compiler expects the source code to be correctly formatted, or else it won’t be able to generate the Java bytecode for our program. Let’s modify our HelloWorld.java file to include some errors, just to see exactly what the error messages from the compiler are like.\nMissing Braces First, let’s replace everything in HelloWorld.java with the following code:\npublic class HelloWorld{ public static void main(String[] args){ System.out.println(\"Hello World\"); } Spot the Error Before compiling that program, can you spot the error? Being able to find errors in code without using a compiler will definitely help you develop programs much faster. It is just like being able to spell words correctly without using a spell-checker. It makes everything go just a bit more smoothly.\nIn each of the examples in this section, take a minute and see if you can spot the error before running it through the compiler. The quiz in this module includes a few questions that require you to spot the error in a piece of code, so this is great practice for later!\nOnce we’ve updated that file, we can compile it using the using the terminal. When we do, we should see output similar to this:\nThat error message gives us quite a bit of information. The first part, java/HelloWorld.java tells us which file the error is in, which is handy later on when we start working in programs that include multiple source code files. Following that, we see a 7 after the file name, which tells us that the error is on or around line 7. However, that doesn’t always mean that we’ll need to edit something at line 7 to fix the error; it just means that the Java Compiler realized there was an error when it reached line 7. Sometimes, we must make a change elsewhere in the file to resolve the issue.\nAfter that, we’ll see the actual error message, which in this case is error: reached end of file while parsing. That may not seem very helpful at first, but it actually gives us an important clue.\nIf we look at the code above, we’ll notice that it is missing the second closing brace } at the end of the file. So, the compiler was expecting to see one more closing brace, but didn’t find it. So, to fix that, we’ll just need to add one more closing brace at the end of the file, and it should work just fine.\nMissing Semicolon Here’s another example we can try:\npublic class HelloWorld{ public static void main(String[] args){ System.out.println(\"Hello World\") } } When we try to compile this file, we should get output similar to the following:\nIn this example, the output is really helpful. It clearly shows us exactly where in our code we forgot to include a semicolon. By adding that symbol where indicated, we can solve the problem.\nRuntime Issues Of course, there are some problems that the compiler may not catch. These are known as runtime errors, since they happen at the time we run our programs. They can be especially tricky to deal with, but thankfully they are usually quite rare.\nIncorrect Main Method Let’s look at one more example:\npublic class HelloWorld{ public static void main(String args){ System.out.println(\"Hello World\"); } } This time, the program actually compiles! However, when we try to actually run the file, we’ll get an error similar to this one:\nThis is because we accidentally forgot the square brackets [] in the main method declaration. It should be public static void main(String[] args), as the error message so helpfully tells us. So, it is important to remember that our programs may still have errors, even if the compiler doesn’t find any.\nBreak Stuff Now that you’ve learned a bit about how to debug compiler errors, let’s see if you can figure out how to cause one! Modify HelloWorld.java in a way that causes the compiler to output the following error message:\nerror: class WrongClass is public, should be declared in a file named WrongClass.java\n",
    "description": "",
    "tags": null,
    "title": "Debugging",
    "uri": "/01-object-oriented-programming/07-java/04-debugging/"
  },
  {
    "content": " Of course, when developing a computer program, there are always times when things don’t quite work the way we’d like them to. Let’s review a few of the common errors and how to solve them.\nWrong Interpreter When working with Python, one of the most common mistakes is typing the python command when we actually mean to use the python3 command. This would cause our program to be interpreted with the Python 2 interpreter instead of the Python 3 interpreter. Those versions of Python are not fully compatible, so we might see some strange errors.\nFor example, if we write our HelloWorld.py file using syntax for Python 2, and try to run it using the Python 3 interpreter, we may see an error similar to this one:\nWe might run into similar problems if we ran code written for Python 3 in the Python 2 interpreter.\nSyntax Issues One of the easiest errors to run into when learning how to program is forgetting a syntax element. To see how that works, let’s replace the code in our HelloWorld.py file with the following:\nprint(\"Hello World\" Spot the Error Before running that program, can you spot the error? Being able to find errors in code without using an interpreter will definitely help you develop programs much faster. It is just like being able to spell words correctly without using a spell-checker. It makes everything go just a bit more smoothly.\nIn each of the examples in this section, take a minute and see if you can spot the error before running it through the interpreter. The quiz in this module includes a few questions that require you to spot the error in a piece of code, so this is great practice for later!\nOnce we’ve updated that file, we can run it using the method of our choice, either using the terminal or the options in the Run Menu. When we do, we should see output similar to this:\nThat error message gives us quite a bit of information. The first part, File \"1p-hello/HelloWorld.py\" tells us which file the error is in, which is handy later on when we start working in programs that include multiple source code files. Following that, we see a line 2 after the file name, which tells us that the error is on or around line 2. However, that doesn’t always mean that we’ll need to edit something at line 2 to fix the error; it just means that the Python Interpreter realized there was an error when it reached line 2. Sometimes, we must make a change elsewhere in the file to resolve the issue.\nAfter that, we’ll see the actual error message, which in this case is SyntaxError: unexpected EOF while parsing. In this message, EOF refers to the end of the file. That may not seem very helpful at first, but it actually gives us an important clue.\nIf we look at the code above, we’ll notice that it is missing the closing parenthesis ) at the end of the line of code. So, the interpreter was expecting to see a closing parenthesis, but didn’t find it. So, to fix that, we’ll just need to add a closing parenthesis at the end of that line of code, and it should work just fine.\nWe would see a similar error if we left off an ending quotation mark \" as well.\nIncorrect Function Here’s another example we can try:\npint(\"Hello World\") When we try to run this file, we should get output similar to the following:\nIn this example, the output is really helpful. It clearly shows us exactly where in our code our error is, and we can see that the error is NameError: name 'pint' is not defined. If we look closely at the line indicated in the error message, we should see that we simply misspelled the name of the print() method, which can easily be corrected.\nBreak Stuff Now that you’ve learned a bit about how to debug interpreter errors, let’s see if you can figure out how to cause one! Modify HelloWorld.py in a way that causes the interpreter to output the following error message:\nSyntaxError: Missing parentheses in call to 'print'\n",
    "description": "",
    "tags": null,
    "title": "Debugging",
    "uri": "/01-object-oriented-programming/07-python/04-debugging/"
  },
  {
    "content": "We have chosen to approach the computational core from the object-oriented perspective. Java and Python both support it. However, it is easier to understand objects (and classes, the name for the code that implements them) after going over a few more fundamental concepts. Thus, in the first few modules you will be asked to copy some code verbatim, with little explanation. Alternatively, you may be asked to only write code between certain comment bars, where we have provided the “header” and “footer” code necessary to make the program.\nBefore we begin programming, let’s go over some basic terminology and rules for high-level programming languages.\nSyntax First all high programming languages have a syntax, a pattern of words and symbols that correct instructions follow. When you receive a syntax error, it means the structure of one or more of your instructions does not follow the language’s rules. In a very real sense, this is the grammar that all correct programming lines will follow.\nNatural languages also have a grammar, but most natural language listeners can understand improper grammar. The question “Which room is the dog in”, containing the dreaded dangling preposition, will almost certainly be correctly interpreted as “In which room is the dog”.\nProgramming languages are not like this – the slightest violation of a grammar rule will result in code that most likely will not run.\nSemantic Second, all programming instructions have a meaning, called a semantic. When your program runs but does not do what you thought it would do, this is a semantic error. Often a semantic error, a bug, occurs when the coder imperfectly understands the effect of the instruction.\nInitial Vocabulary Finally, all programming languages have “parts of speech”, by which the languages identify what kind of thing a word (number) is. Common “parts of speech” include:\nkeywords - a word that has a special meaning. These words tell the program exactly what to do, and we cannot use these words as identifiers. For example, in both Java and Python the word “class” is a keyword; you cannot use a keyword for any purpose other than the one(s) intended by the programming language. literal – text evaluated as itself, for example numbers (i.e. 6.626) are meant to represent themselves. Similarly, text literals are most often enclosed in double quotation marks (“wildcat”). Text literals are most commonly referred to as strings. identifiers - any class, method, or variable name is considered an identifier. Each language will have both rules (syntax) about what can be identifiers and conventions (style guides) about how to construct them. variable – a programmer-defined piece of data. Programmers name their variables with an identifier. method - a piece of code that performs an action in our program. Methods are sometimes referred to as functions or subroutines as well, but we’ll use the term method. Programmers name their methods with an identifier. class – a collection of variables and the methods used to manipulate that data. Classes lay at the heart of object-oriented programming and will be the focus of the last third of this course. symbols - any non-alphanumeric symbol which has special meaning. Common ones include the math symbols (+ - / * =), brackets of all forms (() [] {}) and the some not so obvious ones ( . , ; \" !). Subroutine, Function, and Method Properly, a subroutine is a generic term for a named code fragment that does something. Your programming language may have a subroutine named math.sqrt(x) that calculates the square root of ‘x’ or one called print (something) that prints what ever the value of ‘something’ is to the screen. The print() subroutine may be many lines long, but you gain access to it by calling (using) its name.\nThe issue is different programming languages use different words to refer to different kinds of subroutines. Functions in C may mean a different thing than functions in Fortran, Java, Python or mathematics.\nWe are not going to worry about the details, and will use method or occasionally function for callable subroutines.\n",
    "description": "",
    "tags": null,
    "title": "Features of OOP Languages",
    "uri": "/01-object-oriented-programming/04-features-of-oop/"
  },
  {
    "content": " Resources Slides The Science of Learning Programming from Nathan Bean’s CIS 400 Textbook The Power of Believing You Can Improve | Carol Dweck - TED Talk on Mindsets and the Power of “Yet” The New Science of Learning: How to Learn in Haromony with your Brain by Terry Doyle and Todd Zakrajsek - Great Book on Learning Constructivism on Wikipedia - Article about Jean Piaget’s Learning Philosophy Toward a Developmental Epistemology of Computer Programming by Raymond Lister - Introduces the Stages of Learning to Program Video Script Before we launch into the course itself, I wanted to take a few minutes to share some information with you regarding what we know about how students learn to program. This isn’t just anecdotal evidence from computer science teachers like me, but theories and research from education researchers who study how humans learn new skills and abilities throughout their lives.If I had to summarize all of this information in as few words as possible, I’d simply say “do the work.” Learning to program is difficult, and the only way to really get good at it is through constant practice and learning. However, that greatly oversimplifies the information that I want to share, and I’m hoping that you’ll find some helpful takeaways from this video that you can incorporate into your learning process.\nBefore I begin, I want go give all the credit to Nathan Bean for developing this information as part of his CIS 400 course. He graciously allowed me to use his hard work here, and I encourage you to check out his original version, which is available at the URL shown on this slide.\nThe statement “do the work” is a shorter version of a very common quote from educators, which is “the person doing the work is the person doing the learning.” I couldn’t find a solid reference for who said it first, so I’ll just attributed it to various educators throughout time. This really highlights one of the biggest struggles many students run into when learning to program. There are so many guides online, and the answer to many simple problems can be found through a quick Google search. You can just copy and paste the code, and then your program works. However, did you really learn how to write that program and what it does, or just how to find a quick answer? While this may be a useful tactic from time to time, if you rely too much on other people to do your coding, you really won’t learn it yourself. This is just like learning to shoot free throws on a basketball court or beating your best time in a speedrun - you can’t just watch someone do it and expect to do it yourself (believe me, I’ve tried). So, if you aren’t doing the work, you aren’t really learning.\nNext, let’s address a major myth in computer science. I’ve heard this many times: “some people are just natural born programmers, and others simply cannot learn to program.” And yes, on the surface, it may appear to be this way. Some students just seem to have a knack for programming, and you may sit and struggle and not really get anywhere. However, there is no innate skill or ability that makes you good at programming.\nInstead, let’s reframe what it means to learn programming. At its core, programming is learning to write steps to solve problems in a way that a computer can perform those steps. That’s really what we are doing when we learn programming.\nSo, we must focus on learning how to write those steps with the proper exactitude and precision so that they make sense, and we must understand how a computer functions to be able to program that computer effectively. So, when you see someone who is good at programming, it’s not because they are good at some esoteric skill that you’ll never have - they just know how to express their steps properly and know enough about how a computer works to make their program do what they want. That’s really it! And, to be honest, after a single semester of learning to program, you’ll have all the skills you need to do both of those things! If you know how to make conditionals, loops, functions, and use simple variables and arrays, that’s really all you need. Everything else that comes after that is just refining those skills to make your programs more powerful and your coding more efficient.\nSo, how do we learn these skills? Well, there are a couple of important pieces we need to make sure are in the right place first. For starters, we need to have the correct mindset. Many times I’ll see students struggle to learn how to program, and they’ll say things like what you see on this slide. “Its too hard.” “I don’t understand this.” “I give up.” Statements like this are the sign of a “fixed mindset,” and they can be one of the greatest blockers preventing you from really learning to program. Just like learning any other skill, you have to be open to instruction and willing to learn, or else you’ve failed before you even started.\nInstead, we want to focus on building a growth mindset. In the TED talk by Carol Dweck that is linked below this video, which I encourage you to watch, she talks about the power of “yet.” We can turn these statements around by simply adding positive power of “yet” - “I don’t understand this yet.” “I love a good challenge.” “I’ll keep trying until I get it.” Going into a programming project with a mindset that is open to growth and change is really an important first steps. When I feel like I’m getting a fixed mindset, I like to think about how difficult it would be to teach a child to tie their shoes if they don’t want to learn. As soon as I realize that, it is pretty easy to recognize that same problem in myself and work to correct it.\nSo, once we have our growth mindset, how do we actually learn to program? To understand that, let’s dive a bit into the world of educational theory and the work of Jean Piaget. Piaget was a biologist and psychologist who studied how young children acquired new knowledge, and he helped pioneer the concept of Constructivism, one of the most influential philosophies in education. You can read more about Constructivism in the links below this video.\nOne particular thing that Piaget worked on was a theory of genetic epistemology. Epistemology is the term for the study of human knowledge, so genetic epistemology is the study of the origins, or genesis, of that knowledge. Put more clearly, it’s the study of how humans create new knowledge. This concept was inspired by research done on snails - he was able to prove that two previously distinct species of snails were actually the same by moving snails from one habitat to another and observing how they modified their behaviors and how their shells grew to match the snails in the new habitat. Put clearly, the snails displayed an altered behavior based on their environment. They tried to exist in equilibrium with their environment by adapting their behaviors to fit what they now experienced in the word.\nPiaget suspected that something similar happens when humans try to learn something - the brain tries to adapt itself to maintain an equilibrium in its environment, which in this case is the existing knowledge it contains. So, when the brain is exposed to new ideas, it must somehow adjust to account for that new information. Piaget proposed two different mechanisms for how this occurs: assimilation and accommodation. In assimilation, new knowledge can be added to existing structures in the brain. For example, if you are exposed to a new color, such as periwinkle, you can see that it falls somewhere between blue and violet, two colors you already know. So, you can assimilate that new knowledge into the existing knowledge without a major disruption to your mental structure of existing colors. Accommodation, on the other hand, happens when your brain must radically adapt to new information for which no existing structures exist. This can be very difficult, and can lead to a lot of struggle and frustration when trying to get “over the hump” on a new subject. Think about learning algebra or a new language for the first time - you really don’t have anything you can use to help understand this new material, so you just have to keep at it until those new structures are formed in your brain.\nUnfortunately, to achieve accommodation, your brain simply has to build brand new structures to store and represent all of this new information, and that process is difficult and takes time. Put another way, it takes significant stimulus, usually in the form of doing homework, struggling with difficult problems and wrestling with the new information to try and understand it all, to create enough disequilibrium in your brain that, coupled with a growth mindset, will allow accommodation to occur. However, when all the pieces are in the right place, and you work hard and have a growth mindset, then…\nEUREKA! The structures will form, and you’ll get over that huge hurdle, and things will start falling into place. It may not happen all at once, but it does happen (you’ve probably had it happen to you several times already - think about some eureka moments from your past - were they related to learning a new skill?). Of course, there’s a good chance that your brain might form a few incorrect structures in the process, so you’ll have to overcome those as you continue to learn. I still struggle to spell some words because my brain formed incorrect structures when I was still learning. But, if you continue to work hard and be open to learning, you’ll eventually sort those errors out as well.\nLet’s look at one other concept in education, which is called stage theory. Piaget identified four stages that children go through as they learn to reason about the world. Those four stages are shown on this slide. In the sensorimotor stage, the child is just using their senses to interact with the world, without any real understanding of what will happen when they perform an action. This is best represented by babies and toddlers, who touch and taste everything in their surroundings. Next, the preoperational stage is represented in young children as they start to think symbolically about the world, using pictures and words to represent actions and objects. They then progress to the concrete operational stage, where they can begin to think logically and understand how concrete events happen. They can also start to think inductively, building the general principles of the world from their specific experiences. For example, if they observe that cooked spaghetti is better than raw spaghetti, they might reason that other foods like potatoes are better cooked than raw. Finally, the last stage is the formal operational stage. This stage is represented by the ability to work fully with an abstract work, formulating and testing hypotheses to truly understand how the world works and predict how new items will work before experiencing them firsthand.\nMany later researchers built upon this model to show that adults learn in much the same way. They also discovered that the stages are not rigid, and you may exhibit behaviors from multiple stages at any given time. This is called the “overlapping waves” model, and is shown here in this diagram. So, as you learn new skills, you may be at the operational stage in some areas, but still at the preoperational stage in other areas. This explains why some concepts may make sense while others don’t for a while - you just have to keep going until it all fits together.\nSo, how can we apply all of this information to programming? One theory comes from the work of Lister and Teague, who proposed a developmental epistemology of computer programming. Put another way, they applied this theory to computer science education, and gave us a unique way to think about the different stages of learning to program.\nAt the sensorimotor stage, we’re just getting the basics. So, when given a piece of code and asked to trace what it does, we still make lots of errors and get the answer incorrect. If we want to get a program to work ourselves, it usually involves a lot of trial and error, and many times when it does end up working we don’t even know exactly why it worked that time, but we’re building up a baseline of information that we can use to construct our mental model of how a computer works.\nAs we progress into the preoperational stage, we become better at tracing code correctly, but we still struggle to understand what the program itself does. We see each line of code as a separate instruction, but not the entire program. A great analogy is reading a recipe that calls for flour, water, salt, and yeast. Will it make bread? Biscuits? Pie crust? We’re not sure yet, but at least we can recognize the ingredients. To solve problems at this stage, we typically will randomly adjust pieces of our code that we don’t quite understand and see what it does, trying to form a better idea of the importance of each line in the code.\nEventually, we’ll get to the concrete operational stage. At this stage, we can construct our own programs, but many times we are simply piecing together parts that we’ve used before and performing some futile patches and bugfixes as we refine the program. We can also work backwards to figure out what a program does from execution results, but we still aren’t very good at deducing the results from the code itself. However, we’re starting to work with abstraction, though we tend to simplify things to a level that we are more comfortable with.\nFinally, we’ll reach the formal operational stage. At this stage, we can comfortable read and understand code without executing it, quickly seeing what it does and how it works without fully tracing it ourselves. We can also start to form hypotheses for how to build new programs and code, and reason about whether different approaches would work better or worse than others. This is the goal stage for any programmer! Once you have reached this stage, then you’ll feel totally at home working in code and developing your own programs from scratch.\nSo, how can we enable ourselves to be the best learners we can be? There is lots of interesting research in that area, best summarized in the book “The New Science of Learning” that is linked below this video. Let’s go through a few of the big concepts.\nFirst, getting ample and regular sleep is important, because it allows your brain to build those knowledge structures we discussed earlier and store the memories from the day in long-term storage. Without enough sleep, your brain is unable to process memories offline and make them ready for retrieval later on, an important step in learning. Also, consuming large amounts of caffeine or alcohol can disrupt your sleep patterns, so keep that in mind before you pour that next cup of coffee or go out partying. You can also take advantage of modern technology to help you track your sleep - most smart watches and smartphones today can help with that!\nLikewise, regular exercise is important to both your physical and mental health. When you exercise, especially aerobic exercise that gets your heart rate up, your body releases neurochemicals that help your brain cells communicate. In addition, just getting up and moving around regularly helps keep your body healthy, so take regular breaks, and consider getting a standing desk for some extra benefits.\nResearch also shows that engaging your senses is an important part in learning. This is why we, as teachers, try to vary our lessons with pictures, videos, activities, and more. It is also the basis of the cognitive apprenticeship style of learning that we use, which you can learn more about in the links below this video. We show you the code we are writing, engaging your sense of vision, while talking about it so you are also listening, and then you are writing your own version, using your sense of touch. You can build upon this by using your senses while you learn by taking notes during a lecture video, building concept maps, and even printing out and writing on your code and these lecture scripts. All of these processes help engage different parts of your brain and make it that much easier to build new knowledge structures.\nLooking for patterns is another important way to understand programming. There are many common patterns in computer programs, such as using a for loop to iterate through an array, or an if-else statement to determine if a particular variable is set to a valid value. By recognizing and understanding those patterns, we can more quickly understand new programs that use slightly different versions of the same code. Humans are naturally very good at pattern recognition, and it is one of the reasons why we see the same code structures time and time again - not because they are the only way to accomplish that goal, but because that structure is commonly used across many programs and therefore is easier to understand.\nThere is quite a bit of research into how memories are formed and how we can adjust our studying habits to take advantage of that. For example, cognitive science shows that the parts of our brain responsible for memory creation are active up to one hour after a learning experience has ended, such as a lecture video or activity. So, instead of jumping to the next task, you may want to take a little while to reflect on what you just did and let it sink in before moving on. Likewise, to build strong memories, it is important to constantly recall the memory or use the skills you’ve learned to strengthen their structures in the brain. This is why teachers like to throw in a few questions from a previous exam or quiz every once in a while - it helps strengthen those structures by forcing you to recall information you’ve learned previously. On the other hand, many students try to “cram” a bunch of information right before an exam, only to forget it soon after because it wasn’t recalled more than once. As you progress further, we’ll continue to come back to concepts you’ve already learned and build upon them, a process called elaboration that helps reinforce what you’ve already learned while building new, related knowledge.\nFinally, it is important to remember that we must give our brains the space it needs to focus on the task at hand. Multitasking while learning, such as watching YouTube or Twitch, chatting with friends, or listening to a lecture video while coding can all reduce your brain’s ability to form strong memories and do well. In fact, research shows that individuals who try to multitask tend to make 50% more errors and spend 50% more time on both tasks. So, instead of giving yourself distractions, try to find things that will help you focus better - there are some great playlists online for music without lyrics that can help you focus or code better, and you can easily mute notifications on your phone and on your computer for an hour or so while you work.\nSo, let’s summarize what we’ve covered here. First, and most importantly, remember that you can learn to program, just like the many students who have done it before you. However, it can be difficult and frustrating at times, and it will take lots of hard work on your part to make it happen. That means that you’ll need to read and write a lot of code before it really starts to make sense. In short, you must do the work to learn to program.\nThat said, you can help make the process easier by getting good sleep, exercising regularly, and engaging fully with all of the content in the course. That means you’ll need to take your own notes, maybe draw some diagrams, and annotate code you write and code you read to help you understand it. While you are working, try not to multitask so you can focus. If you are given some code to include in your program, don’t copy/paste it - rewrite it, and make sure you completely understand what each line does. Finally, take some time to read code written by others! GitHub is a great place to discover all sorts of code and see how others write code. If you want to write good poetry you have to read lots of good poetry, and the same goes for coding.\nWith that in mind, I hope you are able to make the best of this course and continue to develop your programming skills. If you are interested in this topic and would like to know more about things you can do to be a better learner, let us know! As you can imagine, teachers like me love to talk about this stuff, so don’t be afraid to ask. Good luck!\n",
    "description": "",
    "tags": null,
    "title": "How to Learn Programming",
    "uri": "/00-introduction/05-how-to-learn-programming/"
  },
  {
    "content": "CC 210 Is 4 Credit Hours The University guidance is you should spend 12 hours per week on a 4 credit hour course. We interpret this to mean twelve 50 minute sessions and assume you spend some time studying and reviewing class materials which is not captured in Codio. Historically, average students come close to this goal, with some weeks going over and the early weeks being low.\nCaveats:\nWe assume that when given two weeks for a project, the “effort” is split equally between both weeks. Students learn different concepts at different rates – your effort may vary Substantially more effort is required to be successful in CC 210 than in CC 110.\nModules 1 - 5 Are Mostly Review Non Python Students If you are taking CC 210 in a language other than Python, Modules 1 - 5 will quickly introduce you to the basic control statements and variable types in your selected language. The concepts will be familiar but the application may be a bit more advanced than that which was covered in CC 110.\nPython Students If you are taking CC 210 in Python, Modules 1 - 5 may seem like total review. However, we introduce syntactical and semantic options that, for simplicity’s sake, were omitted from CC 110.\nDo not become complacent based on the first 3 weeks of course work. This course will become more difficult quickly.\nCC 210 Projects vs CC 110 Homeworks and Labs CUT and PASTE in PROJECTS is Forbidden We want you to use the Codio editor for your Projects. It is deliberately feature poor to emphasize the student’s knowledge of the language, not the editor’s fancy assistance. See your syllabus, but in general a project which has materials copied/pasted in may receive a 0.\nNote: Although cut and paste are permitted in TUTORIALs, plagiarism is not. DO NOT paste in someone else’s work.\n“Check-It” Buttons may not be Comprehensive You must develop and test your projects from the terminal. In CC 110, the student assessment button ran the same test software that the grader did; thus your score on the “Check-it” button was a true indication of your Codio grade.\nIn CC 210, the “Check-it” button may be only a small subset the tests run for your Codio grade, so just because you pass those tests does not mean that your project is complete. This also does not guarantee you will receive a passing grade from the actual grader run after you submit your project. It is your job to test your code thoroughly in the terminal and develop your own test cases.\nAll Work is Subject to Manual review Your submitted project may be reviewed manual for structure, forbidden commands, proper function from the terminal, etc. Please see your syllabus.\nAs a result your the score you receive from Codio may not reflect your final score. Here is the estimated points workflow:\nThe Autograder assigns a grade in Codio and LMS software (e.g. Canvas). Manual review may deduct some points – see syllabus. Plagiarism detection is run and penalties applied. Late penalties may be applied. ",
    "description": "",
    "tags": null,
    "title": "Important Notes",
    "uri": "/0a-codio-intro/05-notes/"
  },
  {
    "content": "An object oriented program contains lots of additional syntax that instructs the compiler or interpreter^[We are going to just use compiler for simplicity’s sake] to impose certain conditions when creating the machine- or byte-code. We will address the details of this syntax after you have learned the necessary background, until then we will just give you the code.\nEverything Is In a Class Classes are the blueprints of objects. In an object oriented program everything is inside a class definition. In this class, every file will contain exactly class definition or class-body.\n# Pseudo Code CLASS \u003cidentifier\u003e{ class-body } // Java public class \u003cidentifier\u003e { class-body } # Python class \u003cidentifier\u003e: class-body Code Block Delimiters The class-definition is a “code-block.” Code-blocks signal a boundary to the compiler. This helps the compiler manage identifier names, memory and other things.\nCode-blocks are delimited, or set apart by various symbols. In Java and pseudo code, this is done with brackets { code block }. Spacing is often also used to make the code more readable, everything a block lines up.\nIn Python each code block is indented to the right; in this class we will use 4-spaces. When a line ends with a colon, Python expects the next line to be the start of a new code block (and therefore indented).\npublic class Foo{ statement one statement two } public class Bar{ statement_three } class Foo: statement_one statement_two class Bar: statement_three In the preceding examples, statement_one and statement_two are the code block for class-Foo’s definition.\nEvery Program Starts Somewhere By tradition (and by rule in many languages) object oriented programs start in a method called main().\n# Pseudo Code CLASS \u003cclass identifier\u003e{ FUCNTION main(){ function-body } } // Java public class \u003cclass identifier\u003e { publlic static void main(String[] args){ method-body } } # Python class \u003cclass identifier\u003e: @classmethod def main(args): method-body For the first several modules, all of the code you need to write will be in the method-body for main(). The area for you code will be clearly delimited.\n# Python class Foo: @classmethod def main(args): ### your code goes below this line ### your code goes above this line ",
    "description": "",
    "tags": null,
    "title": "Structure of an Object-Oriented Program",
    "uri": "/01-object-oriented-programming/05-structure-oop/"
  },
  {
    "content": "CC 210 - Fundamental Computer Programming Concepts Previous Versions\nInstructor Contact Information Instructor: Emily Alfs-Votipka (emilyalfs AT ksu DOT edu)\nI use she/her pronouns. Feel free to share your own pronouns with me, and I’ll do my best to use them! Office: DUE 2161 Office Hours: Monday 10-12 and Friday 11-1 Want to meet with me outside of my regular office hours? https://calendly.com/emilyalfs Preferred Methods of Communication: Email: Please use “cc210-help” ( cc210-help@ksuemailprod.onmicrosoft.com if not on web-mail) for all communication regarding these courses as it allows instructors and TAs to provide a clear and detailed response, as well as easily store and record communication for reference later. You should receive a response within one business day, and hopefully much sooner. Note emailing the instructor or teaching assistants directly may result in longer wait times for your support. Prerequisites C or better in CC 110 - Introduction to Computing (Prerequisite or Concurrent Enrollment with instructor permission) Course Overview Basic concepts in developing computer programs: program structure and syntax, primitive data types, variables, control flow, iteration, simple algorithms, debugging, and good software development practices. Introduction to object-oriented programming.\nCourse Description The course introduces students to computer programming using one of several programming languages. Interactive lessons and engaging projects reinforce new skills and concepts while relating programming fundamentals to the real world. This course covers the basic concepts of programming, from variables and control flow to functions, objects, and simple algorithms.\nLearning Objectives In either Java or Python (J or P), successful students should be able to:\nEvaluate data requirements to create variables, use operators and call/create functions for: strings, integers, real numbers and Boolean values. Understand the creation and use of mono-typed Lists (P) or Arrays (J) and their common built in methods and attributes. Analyze and adapt string methods to split, join and extract sub-strings to solve problems. Understand how code written by them may throw exceptions Understand how to create new exceptions Understand and adapt exception handling structures Understand how to create programs that read-from and write-to text files. Analyze and create conditional statement to control program execution Analyze and create loops to control program execution Analyze and adapt methods/function to control program execution Remember to consider separation of concerns when creating methods Understand how to create instance-based classes to include public/private access of components attributes, properties and methods inheritance Understand how to adapt Boolean equations to common natural language problem statements Understand how to adapt class APIs to incorporate objects in solutions Analyze medium-to-low-level designs expressed as text-based program requirements to create programs including: UML Class diagrams, flow charts and pseudo code Create terminal or console based programs Major Course Topics Programming Basics Primitive Data Types Boolean Logic and Boolean Algebra Conditional Statements Loops Arrays / Lists Strings, String Parsing, and String Formatting Exception Handling and Debugging Console and File I/O Methods, Arguments and Parameters Classes and Objects Object-Oriented Programming Model-View-Controller Architecture Inheritance and Polymorphism Standard Library/Module Collections and generic types Course Structure This course is intended to be taught 100% online, each module is self-paced, and each module must be completed to progress to the next one. Students are expected to make good progress; we have found students who fall behind often fail to successfully complete the class. In general, one or more modules are assigned each week. There are 3 weeks where no new module is assigned. This is a strong indication that the previous week’s module takes a lot of time (modules 7, 10 and 12). Modules will contain recorded videos, online tutorials, text and links to online resources. Each module will include a coding project or assignment, many of which will be graded automatically through Codio. You will be asked to pick a language by the end of the first week (Java or Python) at which point you will be invited to a language specific Canvas course. All content is accessed through this second Canvas course.\nGrading Each student starts with 0 points in the gradebook and works upward toward a final point total earned out of the possible number of points. In this course, each assignment constitutes a portion of the final grade, as detailed below: 70% - Codio Programming Projects 30% - Codio Tutorials and Canvas Quizzes\nLetter grades will be assigned following the standard scale:\n90% - 100% → A 80% - 89.99% → B 70% - 79.99% → C 60% - 69.99% → D 00% - 59.99% → F Late Work Warning Read this late work policy very carefully! If you are unsure how to interpret it, please contact the instructors via the help email. Not understanding the policy does not mean that it won’t apply to you!\nSince this course is entirely online, students may work at any time and at their own pace through the modules. However, to keep everyone on track, there will be approximately one module due each week. Each graded item in the module will have a specific due date specified. Any assignment submitted late will have that assignment’s grade reduced by 10% of the total possible points on that project for each day it is late. This penalty will be assessed automatically in the Canvas gradebook.\nEven if a module is not submitted on time, it must still be completed before a student is allowed to begin the next module. So, students should take care not to get too far behind, as it may be very difficult to catch up.\nFinally, all course work must be submitted on or before the last day of the semester in which the student is enrolled in the course in order for it to be graded on time.\nIf you have extenuating circumstances, please discuss them with the instructor as soon as they arise so other arrangements can be made. If you find that you are getting behind in the class, you are encouraged to speak to the instructor for options to make up missed work.\nIncomplete Policy Students should strive to complete this course in its entirety before the end of the semester in which they are enrolled. However, since retaking the course would be costly and repetitive for students, we would like to give students a chance to succeed with a little help rather than immediately fail students who are struggling.\nIf you are unable to complete the course in a timely manner, please contact the instructor to discuss an incomplete grade. Incomplete grades are given solely at the instructor’s discretion. See the official K-State Grading Policy for more information. In general, poor time management alone is not a sufficient reason for an incomplete grade.\nUnless otherwise noted in writing on a signed Incomplete Agreement Form, the following stipulations apply to any incomplete grades given in Computational Core courses:\nStudents may receive at most two incompletes in Computational Core courses throughout their time in the program Students will be given 6 calendar weeks from the end of the enrolled semester’s finals week to complete the course Any modules in a future CC course which depend on incomplete work will not be accessible until the previous course is finished For example, if a student is given an incomplete in CC 210, then all modules in CC 310 will be inaccessible until CC 210 is complete Students understand that access to instructor and GTA assistance may be limited after the end of an academic semester due to holidays and other obligations If a student fails to resolve an incomplete grade after 6 weeks, they will be assigned an ‘F’ in the course. In addition, they will be dropped from any other Computational Core courses which require the failed course as a prerequisite or corequisite. Recommended Texts \u0026 Supplies To participate in this course, students must have access to a modern web browser and broadband internet connection. All course materials will be provided via Canvas and Codio. Modules may also contain links to external resources for additional information, such as programming language documentation.\nSubject to Change The details in this syllabus are not set in stone. Due to the flexible nature of this class, adjustments may need to be made as the semester progresses, though they will be kept to a minimum. If any changes occur, the changes will be posted on the Canvas page for this course and emailed to all students.\nWarning Effective 9/26/2022: Due to rampant plagiarism, the copying and pasting of code is no longer allowed. All coding must be done in the Codio IDE. Moving forward, if you paste any code into Codio (other than code which is explicitly given as starter code) you will receive an XF. The X indicates that academic dishonesty occurred and the F indicates that you failed the course.\nStandard Syllabus Statements Info The statements below are standard syllabus statements from K-State and our program. The latest versions are available online here.\nAcademic Honesty Kansas State University has an Honor and Integrity System based on personal integrity, which is presumed to be sufficient assurance that, in academic matters, one’s work is performed honestly and without unauthorized assistance. Undergraduate and graduate students, by registration, acknowledge the jurisdiction of the Honor and Integrity System. The policies and procedures of the Honor and Integrity System apply to all full and part-time students enrolled in undergraduate and graduate courses on-campus, off-campus, and via distance learning. A component vital to the Honor and Integrity System is the inclusion of the Honor Pledge which applies to all assignments, examinations, or other course work undertaken by students. The Honor Pledge is implied, whether or not it is stated: “On my honor, as a student, I have neither given nor received unauthorized aid on this academic work.” A grade of XF can result from a breach of academic honesty. The F indicates failure in the course; the X indicates the reason is an Honor Pledge violation.\nFor this course, a violation of the Honor Pledge will result in sanctions such as a 0 on the assignment or an XF in the course, depending on severity. Actively seeking unauthorized aid, such as posting lab assignments on sites such as Chegg or StackOverflow or asking another person to complete your work, even if unsuccessful, will result in an immediate XF in the course.\nWe reserve the right to use various platforms that can perform automatic plagiarism detection by tracking changes made to files and comparing submitted projects against other students’ submissions and known solutions. That information may be used to determine if plagiarism has taken place.\nStudents with Disabilities At K-State it is important that every student has access to course content and the means to demonstrate course mastery. Students with disabilities may benefit from services including accommodations provided by the Student Access Center. Disabilities can include physical, learning, executive functions, and mental health. You may register at the Student Access Center or to learn more contact:\nManhattan/Olathe/Global Campus – Student Access Center accesscenter@k-state.edu 785-532-6441 K-State Salina Campus – Julie Rowe; Student Success Coordinator jarowe@k-state.edu 785-820-7908 Students already registered with the Student Access Center please request your Letters of Accommodation early in the semester to provide adequate time to arrange your approved academic accommodations. Once SAC approves your Letter of Accommodation it will be e-mailed to you, and your instructor(s) for this course. Please follow up with your instructor to discuss how best to implement the approved accommodations.\nExpectations for Conduct All student activities in the University, including this course, are governed by the Student Judicial Conduct Code as outlined in the Student Governing Association By Laws, Article V, Section 3, number 2. Students who engage in behavior that disrupts the learning environment may be asked to leave the class. Mutual Respect and Inclusion in K-State Teaching \u0026 Learning Spaces At K-State, faculty and staff are committed to creating and maintaining an inclusive and supportive learning environment for students from diverse backgrounds and perspectives. K-State courses, labs, and other virtual and physical learning spaces promote equitable opportunity to learn, participate, contribute, and succeed, regardless of age, race, color, ethnicity, nationality, genetic information, ancestry, disability, socioeconomic status, military or veteran status, immigration status, Indigenous identity, gender identity, gender expression, sexuality, religion, culture, as well as other social identities.\nFaculty and staff are committed to promoting equity and believe the success of an inclusive learning environment relies on the participation, support, and understanding of all students. Students are encouraged to share their views and lived experiences as they relate to the course or their course experience, while recognizing they are doing so in a learning environment in which all are expected to engage with respect to honor the rights, safety, and dignity of others in keeping with the K-State Principles of Community.\nIf you feel uncomfortable because of comments or behavior encountered in this class, you may bring it to the attention of your instructor, advisors, and/or mentors. If you have questions about how to proceed with a confidential process to resolve concerns, please contact the Student Ombudsperson Office. Violations of the student code of conduct can be reported here. If you experience bias or discrimination, it can be reported here.\nNetiquette Info This is our personal policy and not a required syllabus statement from K-State. It has been adapted from this statement from K-State Global Campus, and the Recurse Center Manual. We have adapted their ideas to fit this course.\nOnline communication is inherently different than in-person communication. When speaking in person, many times we can take advantage of the context and body language of the person speaking to better understand what the speaker means, not just what is said. This information is not present when communicating online, so we must be much more careful about what we say and how we say it in order to get our meaning across.\nHere are a few general rules to help us all communicate online in this course, especially while using tools such as Canvas or Discord:\nUse a clear and meaningful subject line to announce your topic. Subject lines such as “Question” or “Problem” are not helpful. Subjects such as “Logic Question in Project 5, Part 1 in Java” or “Unexpected Exception when Opening Text File in Python” give plenty of information about your topic. Use only one topic per message. If you have multiple topics, post multiple messages so each one can be discussed independently. Be thorough, concise, and to the point. Ideally, each message should be a page or less. Include exact error messages, code snippets, or screenshots, as well as any previous steps taken to fix the problem. It is much easier to solve a problem when the exact error message or screenshot is provided. If we know what you’ve tried so far, we can get to the root cause of the issue more quickly. Consider carefully what you write before you post it. Once a message is posted, it becomes part of the permanent record of the course and can easily be found by others. If you are lost, don’t know an answer, or don’t understand something, speak up! Email and Canvas both allow you to send a message privately to the instructors, so other students won’t see that you asked a question. Don’t be afraid to ask questions anytime, as you can choose to do so without any fear of being identified by your fellow students. Class discussions are confidential. Do not share information from the course with anyone outside of the course without explicit permission. Do not quote entire message chains; only include the relevant parts. When replying to a previous message, only quote the relevant lines in your response. Do not use all caps. It makes it look like you are shouting. Use appropriate text markup (bold, italics, etc.) to highlight a point if needed. No feigning surprise. If someone asks a question, saying things like “I can’t believe you don’t know that!” are not helpful, and only serve to make that person feel bad. No “well-actually’s.” If someone makes a statement that is not entirely correct, resist the urge to offer a “well, actually…” correction, especially if it is not relevant to the discussion. If you can help solve their problem, feel free to provide correct information, but don’t post a correction just for the sake of being correct. Do not correct someone’s grammar or spelling. Again, it is not helpful, and only serves to make that person feel bad. If there is a genuine mistake that may affect the meaning of the post, please contact the person privately or let the instructors know privately so it can be resolved. Avoid subtle -isms and microaggressions. Avoid comments that could make others feel uncomfortable based on their personal identity. See the syllabus section on Diversity and Inclusion above for more information on this topic. If a comment makes you uncomfortable, please contact the instructor. Avoid sarcasm, flaming, advertisements, lingo, trolling, doxxing, and other bad online habits. They have no place in an academic environment. Tasteful humor is fine, but sarcasm can be misunderstood. As a participant in course discussions, you should also strive to honor the diversity of your classmates by adhering to the K-State Principles of Community.\nFace Coverings Kansas State University strongly encourages, but does not require, that everyone wear masks while indoors on university property, including while attending in-person classes. For additional information and the latest on K-State’s face covering policy, see this page. Discrimination, Harassment, and Sexual Harassment Kansas State University is committed to maintaining academic, housing, and work environments that are free of discrimination, harassment, and sexual harassment. Instructors support the University’s commitment by creating a safe learning environment during this course, free of conduct that would interfere with your academic opportunities. Instructors also have a duty to report any behavior they become aware of that potentially violates the University’s policy prohibiting discrimination, harassment, and sexual harassment ( PPM 3010).\nIf a student is subjected to discrimination, harassment, or sexual harassment, they are encouraged to make a non-confidential report to the University’s Office for Institutional Equity (OIE) using the online reporting form. Incident disclosure is not required to receive resources at K-State. Reports that include domestic and dating violence, sexual assault, or stalking, should be considered for reporting by the complainant to the Kansas State University Police Department or the Riley County Police Department. Reports made to law enforcement are separate from reports made to OIE. A complainant can choose to report to one or both entities. Confidential support and advocacy can be found with the K-State Center for Advocacy, Response, and Education (CARE). Confidential mental health services can be found with Lafene Counseling and Psychological Services (CAPS). Academic support can be found with the Office of Student Life (OSL). OSL is a non-confidential resource. A comprehensive list of resources is available here. If you have questions about non-confidential and confidential resources, please contact OIE at equity@ksu.edu or (785) 532–6220.\nAcademic Freedom Statement Kansas State University is a community of students, faculty, and staff who work together to discover new knowledge, create new ideas, and share the results of their scholarly inquiry with the wider public. Although new ideas or research results may be controversial or challenge established views, the health and growth of any society requires frank intellectual exchange. Academic freedom protects this type of free exchange and is thus essential to any university’s mission.\nMoreover, academic freedom supports collaborative work in the pursuit of truth and the dissemination of knowledge in an environment of inquiry, respectful debate, and professionalism. Academic freedom is not limited to the classroom or to scientific and scholarly research, but extends to the life of the university as well as to larger social and political questions. It is the right and responsibility of the university community to engage with such issues.\nCampus Safety Kansas State University is committed to providing a safe teaching and learning environment for student and faculty members. In order to enhance your safety in the unlikely case of a campus emergency make sure that you know where and how to quickly exit your classroom and how to follow any emergency directives. To view additional campus emergency information go to the University’s main page, www.k-state.edu, and click on the Emergency Information button, located at the bottom of the page. Student Resources K-State has many resources to help contribute to student success. These resources include accommodations for academics, paying for college, student life, health and safety, and others found at www.k-state.edu/onestop. Student Academic Creations Student academic creations are subject to Kansas State University and Kansas Board of Regents Intellectual Property Policies. For courses in which students will be creating intellectual property, the K-State policy can be found at University Handbook, Appendix R: Intellectual Property Policy and Institutional Procedures (part I.E.). These policies address ownership and use of student academic creations. Mental Health Your mental health and good relationships are vital to your overall well-being. Symptoms of mental health issues may include excessive sadness or worry, thoughts of death or self-harm, inability to concentrate, lack of motivation, or substance abuse. Although problems can occur anytime for anyone, you should pay extra attention to your mental health if you are feeling academic or financial stress, discrimination, or have experienced a traumatic event, such as loss of a friend or family member, sexual assault or other physical or emotional abuse.\nIf you are struggling with these issues, do not wait to seek assistance.\nKansas State University Counseling Services offers free and confidential services to assist you to meet these challenges. Lafene Health Center has specialized nurse practitioners to assist with mental health. The Office of Student Life can direct you to additional resources. K-State Family Center offers individual, couple, and family counseling services on a sliding fee scale. Center for Advocacy, Response, and Education (CARE) provides free and confidential assistance for those in our K-State community who have been victimized by violence. For Kansas State Polytechnic Campus:\nKansas State Polytechnic Counseling Services offers free and confidential services to assist you to meet these challenges. The Kansas State Polytechnic Office of Student Life can direct you to additional resources. University Excused Absences K-State has a University Excused Absence policy (Section F62). Class absence(s) will be handled between the instructor and the student unless there are other university offices involved. For university excused absences, instructors shall provide the student the opportunity to make up missed assignments, activities, and/or attendance specific points that contribute to the course grade, unless they decide to excuse those missed assignments from the student’s course grade. Please see the policy for a complete list of university excused absences and how to obtain one. Students are encouraged to contact their instructor regarding their absences. Copyright Notice © The materials in this online course fall under the protection of all intellectual property, copyright and trademark laws of the U.S. The digital materials included here come with the legal permissions and releases of the copyright holders. These course materials should be used for educational purposes only; the contents should not be distributed electronically or otherwise beyond the confines of this online course. The URLs listed here do not suggest endorsement of either the site owners or the contents found at the sites. Likewise, mentioned brands (products and services) do not suggest endorsement. Students own copyright to what they create. ",
    "description": "",
    "tags": null,
    "title": "CC 210 Syllabus - Fall 2022",
    "uri": "/00-introduction/06-syllabus/"
  },
  {
    "content": "That’s it! We’ve completed this unit in Codio, and we are now on the last page.\nThere’s just one more thing to do: we need to mark the unit as complete. When we do that, Codio will grade our work and then send the grade to Canvas. Once the grade is recorded in Canvas, we’ll get access to the next item in the module.\nTake a Breather Once you’ve marked a unit complete in Codio, it may take several minutes for the grading process to complete and for your grade to appear in Canvas. So, if you immediately try to access the next item in the module, you may not have access until Codio has submitted your grade to Canvas.\nSo, once you’ve marked a unit as complete, it’s a great time to take a quick breather, leave your computer behind, refill your beverage of choice, and clear your mind while Codio and Canvas handle the grading. By the time you get back, your grade should appear in Canvas and you’ll be ready to go.\nIf your grade doesn’t appear in Canvas after several minutes, please send a message to the instructors via your class’s help system.\nThere are several ways to mark a unit as complete. First and foremost, the last page of the guide in each project should have a “Mark as Completed” button at the bottom of the page, but these textbook tutorials don’t. So, once we see that button, we’ll know we’ve reached the end of a project.\nOn the tutorials, we can click the gear icon in the upper-right of the page, and select “Mark as Completed” there. It should also be available in the tutorials as well.\nFinally, we can find a “Mark as Completed” option on the Education menu at the top of the window. Each of these will perform the same function, so we can use any one of them when we are finished with our work.\nThe Codio Documentation gives several different ways that it can be done.\nOf course, don’t forget the warning on the previous page - we should make sure we are completely done with the unit before marking it as complete.\nSo, let’s go ahead and mark this unit as complete by clicking the “Mark as Completed” option found by clicking the gear icon above, or the Education menu at the top. Once we do that, we’ll be able to complete the final few things in Canvas for this module, and then we can move on to Module 1 - Hello World!\n",
    "description": "",
    "tags": null,
    "title": "Completing a Unit",
    "uri": "/0a-codio-intro/06-completing/"
  },
  {
    "content": "Tradition dictates that the first program in any introduction course is Hello World.\nHello World simply prints “Hello World” to the screen.\nAn object-oriented version of this program might look like\n1 CLASS HelloWorld{ 2 FUNCTION main(args){ 3 DISPLAY(\"Hello World!\") 4 } 5 } Here the “work” of the program is done by line 3.\nPseudo Code Pseudo code is typically used to outline the control-flow of a program. Control-flow refers to the order in which individual statements are executed. The CC courses follow a modified version pseudo code introduced in the AP Computer Science Principles–Course Exam Description1. Pseudo code is intended to be a near English representation of a program.\nDISPLAY() The pseudo code statement DISPLAY(description) does a lot of heavy lifting. In this context, DISPLAY means visually indicate to the user. In this course we will run terminal based programs and DISPLAY will typically indicate “print to the terminal”.\nHowever, in other contexts DISPLAY could mean send a notification (smart phone), open a pop up (graphical user interface), or even change the speedometer (automotive display controller).\nCollege Board, 2020 available https://apcentral.collegeboard.org/pdf/ap-computer-science-principles-course-and-exam-description.pdf?course=ap-computer-science-principles ↩︎\n",
    "description": "",
    "tags": null,
    "title": "Hello World",
    "uri": "/01-object-oriented-programming/06-hello-world/"
  },
  {
    "content": "Chapter 1 - Java Hello World Tutorial Hello World in Java\n",
    "description": "",
    "tags": null,
    "title": "Java Hello World Tutorial",
    "uri": "/01-object-oriented-programming/07-java/"
  },
  {
    "content": "Chapter 1 - Python Hello World Tutorial Hello World in Python\n",
    "description": "",
    "tags": null,
    "title": "Python Hello World Tutorial",
    "uri": "/01-object-oriented-programming/07-python/"
  },
  {
    "content": " Resources K-State Honor \u0026 Integrity System Video Script “On my honor, as a student, I have neither given nor received unauthorized aid on this academic work.” - K-State Honor Pledge\nPlagiarism is a very serious concern in this course, and something that we do not take lightly. Computer programs and code are especially easy targets for plagiarism due to how easy it is to copy and manipulate code in such a way that it is unrecognizable as the original source but still performs correctly.\nAt its core, plagiarism is taking someone else’s work and passing it off as your own without giving appropriate credit to the original source. As a student at K-State, you are bound by the K-State Honor Code not to accept any unauthorized aid, and this includes plagiarized code.\nWhen it comes to plagiarism in computer code, there is a fine line between using resources appropriately and copying code. In this program, you should strive to avoid plagiarism issues by doing the following:\nDo not search for or use any complete solutions to projects in this course found online or from fellow students. Small portions of code may be used or adapted from an online source with proper citation. To cite a piece of code, include a code comment section above it that contains the original source URL and a description of why it was used. In general, copying or adapting small pieces of code to perform auxiliary functions in the assignment is permitted. Copying or adapting code that is the general goal of the assignment should be avoided. For example, if the assignment is to create a bubble sort algorithm, you should write the algorithm from scratch yourself since that is the goal of the assignment. If the assignment is to create a program for displaying data that you feel should be sorted, you may choose to adapt an existing sorting algorithm for your needs (or use one from a library).\nIf you aren’t sure about whether it is OK to use an online resource or piece of code in this course, please contact the instructors using the course discussion forums or help email address. You will not get in trouble for asking, and it will help you determine what the best course of action is. Plagiarism can really only occur when you submit the assignment for grading, so you are welcome to ask for clarification or a judgement on whether a particular usage is acceptable at any time before you submit the assignment.\nCodio has features that will compare your submissions against those of your fellow students. Any submissions with a high degree of similarity may be subjected to additional scrutiny by the instructors to determine if plagiarism has occurred.\nIn this course, any violation of the K-State Honor Code will result in a 0 on that assignment and a report made to the K-State Honor Council. A second violation will result in an XF in this course, as well as any additional sanctions imposed by the K-State Honor Council.\nFor more information on the K-State Honor \u0026 Integrity system, please visit their website, which is linked in the resources section below this video.\n",
    "description": "",
    "tags": null,
    "title": "Plagiarism Policy",
    "uri": "/00-introduction/07-plagiarism/"
  },
  {
    "content": "We’ve now written our first program in a real, high-level programming language. While the program may only consist of a few lines of code at most, it is still a very big step toward writing bigger and more advanced programs.\nComputer technology has some quite a long way since the 1950s, but the same needs that drove the development of compilers and interpreters continue today to drive the development of more advanced programming languages and related tools. It’s a very exciting field to experience firsthand, and once we understand a bit of code, we’ll be able to see it for ourselves.\nIn the next chapter, we’ll dive in head first to learn all about how to store and manipulate various types of data in our programs.\nNow that we are done with this unit, we can mark it as completed. The Codio Documentation gives instructions for how to do that. The easiest way is to either click the Education menu and select Mark as Completed, or by clicking the Gear Icon at the top of this panel and selecting Mark as Completed.\n",
    "description": "",
    "tags": null,
    "title": "Summary",
    "uri": "/01-object-oriented-programming/08-summary/"
  },
  {
    "content": "Chapter Y Weekly Updates Information for Current Students!\n",
    "description": "",
    "tags": null,
    "title": "Weekly Updates",
    "uri": "/y-weekly-updates/"
  },
  {
    "content": "Chapter Z AP Alignment This section contains details and evidence for how this course is aligned with the AP Computer Science A course and exam.\n",
    "description": "",
    "tags": null,
    "title": "AP Alignment",
    "uri": "/z-ap-alignment/"
  },
  {
    "content": "CC 210 Textbook This is the textbook for CC 210.\n",
    "description": "",
    "tags": null,
    "title": "Homepage",
    "uri": "/"
  },
  {
    "content": "",
    "description": "",
    "tags": null,
    "title": "Categories",
    "uri": "/categories/"
  },
  {
    "content": "",
    "description": "",
    "tags": null,
    "title": "Tags",
    "uri": "/tags/"
  }
]
