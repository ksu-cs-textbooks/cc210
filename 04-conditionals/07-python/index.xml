




	
	
		

	
	
		

	
	
		

	
	
		

	
	
		
		

	
	
		
		
		

	
	
		
		
		

	
	
		

	
	
		
		
		

	
	
		

	
	
		
		
		

	
	
		

	
	
		
		
		

	
	
		

	
	
		
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		

	
	
		
		
		

	
	
		

	
	
		
		
		

	
	
		

	
	
		
		
		

	
	
		

	
	
		
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		

	
	
		

	
	
		
		
		
		

	
	
		

	
	
		

	
	
		
		
		

	
	
		

	
	
		
		
		

	
	
		

	
	
		
		
		

	
	
		
		
		

	
	
		

	
	
		

	
	
		
		
		

	
	
		

	
	
		
		
		

	
	
		

	
	
		
		
		

	
	
		
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		

	
	
		

	
	
		
		
		
		

	
	
		

	
	
		

	
	
		
		
		
		

	
	
		

	
	
		

	
	
		

	
	
		
		
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		

	
	
		

	
	
		
		
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		

	
	
		

	
	
		
		
		
		

	
	
		

	
	
		

	
	
		
		
		
		

	
	
		

	
	
		

	
	
		
		
		
		

	
	
		

	
	
		

	
	
		
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		

	
	
		

	
	
		
		
		
		

	
	
		

	
	
		

	
	
		

	
	
		
		
		
		

	
	
		

	
	
		

	
	
		
		
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		

	
	
		

	
	
		
		
		
		

	
	
		

	
	
		

	
	
		
		
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		
<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python Conditional Statements on CC 210 Textbook</title>
    <link>https://ksu-cs-textbooks.github.io/cc210/04-conditionals/07-python/</link>
    <description>Recent content in Python Conditional Statements on CC 210 Textbook</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="https://ksu-cs-textbooks.github.io/cc210/04-conditionals/07-python/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Chaining &amp; Nesting</title>
      <link>https://ksu-cs-textbooks.github.io/cc210/04-conditionals/07-python/04-chaining-nesting/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ksu-cs-textbooks.github.io/cc210/04-conditionals/07-python/04-chaining-nesting/</guid>
      <description>YouTube Video
Video Materials
One of the most powerful features of the conditional constructs we&amp;rsquo;ve covered so far in this course is the ability to chain them together or nest them within each other to achieve remarkably useful program structures. The ability to use conditional constructs effectively is one of the most powerful skills to develop as a programmer.
Zero, One, Negative One A great example of the many ways to structure a program using conditional constructs is building a simple program that does three things:</description>
    </item>
    <item>
      <title>A Worked Example</title>
      <link>https://ksu-cs-textbooks.github.io/cc210/04-conditionals/07-python/08-worked-example/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ksu-cs-textbooks.github.io/cc210/04-conditionals/07-python/08-worked-example/</guid>
      <description>YouTube Video
Video Materials
We&amp;rsquo;ve covered quite a bit of new material so far in this chapter. Let&amp;rsquo;s work through a complete example from start to finish, just to see how we can put all of those pieces together to make a very powerful program.
Problem Statement First, let&amp;rsquo;s start with a problem statement. Here&amp;rsquo;s an interesting problem that we can try to solve:
Write an object oriented program that accepts a command line argument that is a positive integer representing a year, and prints whether that year is a leap year or not.</description>
    </item>
    <item>
      <title>If Statement</title>
      <link>https://ksu-cs-textbooks.github.io/cc210/04-conditionals/07-python/01-if/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ksu-cs-textbooks.github.io/cc210/04-conditionals/07-python/01-if/</guid>
      <description>Now that we&amp;rsquo;ve covered many different types of conditional constructs, let&amp;rsquo;s dive right in and see how they can be used in Python.
First, let&amp;rsquo;s look at the If statement. In Python, the syntax for an If statement is shown below:
if &amp;lt;Boolean expression&amp;gt;: &amp;lt;True block&amp;gt; As expected, Python will first evaluate the &amp;lt;Boolean expression&amp;gt; to a single Boolean value. If that value is True, it will execute the instructions in the &amp;lt;True block&amp;gt;, which can be one or more lines of code, or even additional constructs as we&amp;rsquo;ll see later.</description>
    </item>
    <item>
      <title>If-Else Statement</title>
      <link>https://ksu-cs-textbooks.github.io/cc210/04-conditionals/07-python/02-if-else/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ksu-cs-textbooks.github.io/cc210/04-conditionals/07-python/02-if-else/</guid>
      <description>The If-Else statement in Python is very similar to the If statement. In Python, the syntax for an If-Else statement is shown below:
if &amp;lt;Boolean expression&amp;gt;: &amp;lt;True block&amp;gt; else: &amp;lt;False block&amp;gt; As expected, Python will first evaluate the &amp;lt;Boolean expression&amp;gt; to a single Boolean value. If that value is True, it will execute the instructions in the &amp;lt;True block&amp;gt;, which can be one or more lines of code, or even additional constructs as we&amp;rsquo;ll see later.</description>
    </item>
    <item>
      <title>Variable Scope</title>
      <link>https://ksu-cs-textbooks.github.io/cc210/04-conditionals/07-python/03-variable-scope/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ksu-cs-textbooks.github.io/cc210/04-conditionals/07-python/03-variable-scope/</guid>
      <description>Now that we&amp;rsquo;ve learned how to create new code blocks in our programs using constructs such as the If and If-Else statements, we must take a minute to discuss one concept related to those code blocks.
The scope of a variable refers to the possible areas in a program&amp;rsquo;s code where that variable can be accessed and used. This is very important to understand once we begin introducing additional code blocks in our programs, because it can affect where we can access those variables.</description>
    </item>
    <item>
      <title>If-Elif Jump Tables</title>
      <link>https://ksu-cs-textbooks.github.io/cc210/04-conditionals/07-python/05-if-elif-jump-tables/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ksu-cs-textbooks.github.io/cc210/04-conditionals/07-python/05-if-elif-jump-tables/</guid>
      <description>Many programming languages include a special type of conditional construct, called a Switch Statement. It allows the computer to select a branch directly based on the value of a variable. So, instead of building many inline If-Else If-Else statements, the code uses a single Switch Statement instead, with a number of cases that represent each possible value of the variable and the associated block of code that should be executed. Switch Statements are included in C, Java, and many other languages.</description>
    </item>
    <item>
      <title>Ternary Statement</title>
      <link>https://ksu-cs-textbooks.github.io/cc210/04-conditionals/07-python/06-ternary/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ksu-cs-textbooks.github.io/cc210/04-conditionals/07-python/06-ternary/</guid>
      <description>Python also includes the Ternary Conditional Operator, which can be used as a shortcut for an If-Then-Else statement.
First, consider the flowchart we saw earlier in this chapter:
In Python, this flowchart could be represented by the following code:
x = 3 y = 5 z = x if x &amp;gt; y else y print(z) In this program, the expression x if x &amp;gt; y else y is the Ternary Conditional Operator.</description>
    </item>
    <item>
      <title>Subgoals</title>
      <link>https://ksu-cs-textbooks.github.io/cc210/04-conditionals/07-python/07-subgoals/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ksu-cs-textbooks.github.io/cc210/04-conditionals/07-python/07-subgoals/</guid>
      <description>Now that we&amp;rsquo;ve seen how to work with conditional constructs in Python, let&amp;rsquo;s break down our thought process a bit into subgoals once again.
Evaluating Conditional Constructs Here are the subgoals we can use for evaluating conditional constructs:
1. Diagram Which Statements Go Together First, when we see a conditional construct in code, we must determine which statements go together. Specifically, we need to know which statements are in the True branch, and which statements are in the False branch.</description>
    </item>
  </channel>
</rss>